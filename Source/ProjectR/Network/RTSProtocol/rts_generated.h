// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RTS_OVERLORD_H_
#define FLATBUFFERS_GENERATED_RTS_OVERLORD_H_

#include "flatbuffers/flatbuffers.h"

#include "PDU_generated.h"
#include "rts.c2s_generated.h"
#include "rts.s2c_generated.h"
#include "rts.struct_generated.h"

namespace OVERLORD {

struct CMD_RTS;
struct CMD_RTST;

enum UNION_RTS {
  UNION_RTS_NONE = 0,
  UNION_RTS_OVERLORD_RTS_C2S_ACK_CINEMATIC_DONE = 1,
  UNION_RTS_OVERLORD_RTS_C2S_ACK_STEP_AND_GO = 2,
  UNION_RTS_OVERLORD_RTS_C2S_CHAT_CHANNEL_MOVE = 3,
  UNION_RTS_OVERLORD_RTS_C2S_CHAT_MESSAGE = 4,
  UNION_RTS_OVERLORD_RTS_C2S_CHAT_SUBSCRIBE = 5,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_AUTH = 6,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_CREATE = 7,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_FORMATION = 8,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_MOVE = 9,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_SCORE = 10,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_SPAWN = 11,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_TELEPORT = 12,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ATTACK_NOW = 13,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_CHANGE_CREW = 14,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_CHANGE_SPIRIT = 15,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_DICE = 16,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_DROP_CREW = 17,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ENTER = 18,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_EXIT = 19,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_PLAYER_SCORE = 20,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_SKILL_CAST = 21,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_DECK_SELECT = 22,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_DECK_SELECT_READY = 23,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_PARTY_UI_READY = 24,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_DECK_SELECT = 25,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_DECK_SELECT_READY = 26,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH = 27,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH_CANCEL = 28,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH_JOIN = 29,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_GO = 30,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_UI_READY = 31,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_UPDATE_PUBLIC = 32,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_PING = 33,
  UNION_RTS_OVERLORD_RTS_C2S_REQ_PLAY_READY = 34,
  UNION_RTS_OVERLORD_RTS_IC_IC_BT_ACTOR_MOVE = 35,
  UNION_RTS_OVERLORD_RTS_IC_IC_BT_ACTOR_RESPAWN = 36,
  UNION_RTS_OVERLORD_RTS_IC_IC_NPCHOST_STEP_ON = 37,
  UNION_RTS_OVERLORD_RTS_IC_IC_SPAWN_NPC = 38,
  UNION_RTS_OVERLORD_RTS_IC_NPC_HANDLER_JOIN = 39,
  UNION_RTS_OVERLORD_RTS_IC_ROOM_DISPOSE = 40,
  UNION_RTS_OVERLORD_RTS_IC_ROOM_JOIN = 41,
  UNION_RTS_OVERLORD_RTS_IC_ROOM_PLAYER = 42,
  UNION_RTS_OVERLORD_RTS_IC_ROOM_PLAYER_DISCONNECTED = 43,
  UNION_RTS_OVERLORD_RTS_IC_ROOM_REJOIN = 44,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_AUTH = 45,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_CREATE = 46,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_DESPAWN = 47,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_DISAPPEAR = 48,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_FORMATION = 49,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_MEDAL_UPDATE = 50,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_RESPAWN = 51,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_SPAWN = 52,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_TELEPORT = 53,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_UPDATE = 54,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ATTACK_NORMAL = 55,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ATTACK_NOW = 56,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_CHANGE_CREW = 57,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_CHANGE_SPIRIT = 58,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_COUNT = 59,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_NUM = 60,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_OPEN = 61,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_RESULT = 62,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DOOR_EVENT = 63,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DROP_CREW = 64,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_NEW_PLAYER = 65,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_ACTIVATED = 66,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_BLOCKED = 67,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED = 68,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED_INTERVAL = 69,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_SCORE = 70,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_UPDATE = 71,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_PLAYER_SCORE = 72,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_SKILL_UPDATE = 73,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_TIME_REMAIN = 74,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_TEAM_POINT_UPDATE = 75,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ZONE_EVENT = 76,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ZONE_STATE = 77,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_CINEMATIC_DONE = 78,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_COMMON_ERROR = 79,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_COST_UPDATE_AVATAR = 80,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_SELECT = 81,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_SELECT_READY = 82,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_TIME_REMAIN = 83,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_MATCHED = 84,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_CACHED_DONE = 85,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SCENE_LOADED = 86,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SELECT = 87,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SELECT_READY = 88,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_DISCONNECTED = 89,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_MATCHED = 90,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_MATCH_ROUND = 91,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_GO = 92,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_LEADER_SLOT = 93,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_PLAYER = 94,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_PLAYER_EXIT = 95,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_UPDATE_PUBLIC = 96,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_COUNT = 97,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_READY = 98,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_SEND_RESULT = 99,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_START = 100,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_TIMEOUT = 101,
  UNION_RTS_OVERLORD_RTS_S2C_ACK_STEP_GO = 102,
  UNION_RTS_OVERLORD_RTS_S2C_CHAT_CHANNEL_ENTER = 103,
  UNION_RTS_OVERLORD_RTS_S2C_CHAT_CHANNEL_EXIT = 104,
  UNION_RTS_OVERLORD_RTS_S2C_CHAT_MESSAGE = 105,
  UNION_RTS_OVERLORD_RTS_S2C_CHAT_SUBSCRIBED = 106,
  UNION_RTS_OVERLORD_RTS_S2C_CHAT_UNSUBSCRIBED = 107,
  UNION_RTS_OVERLORD_RTS_S2C_REQ_CINEMATIC_PLAY = 108,
  UNION_RTS_OVERLORD_RTS_S2C_REQ_STEP_READY = 109,
  UNION_RTS_MIN = UNION_RTS_NONE,
  UNION_RTS_MAX = UNION_RTS_OVERLORD_RTS_S2C_REQ_STEP_READY
};

inline UNION_RTS (&EnumValuesUNION_RTS())[110] {
  static UNION_RTS values[] = {
    UNION_RTS_NONE,
    UNION_RTS_OVERLORD_RTS_C2S_ACK_CINEMATIC_DONE,
    UNION_RTS_OVERLORD_RTS_C2S_ACK_STEP_AND_GO,
    UNION_RTS_OVERLORD_RTS_C2S_CHAT_CHANNEL_MOVE,
    UNION_RTS_OVERLORD_RTS_C2S_CHAT_MESSAGE,
    UNION_RTS_OVERLORD_RTS_C2S_CHAT_SUBSCRIBE,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_AUTH,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_CREATE,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_FORMATION,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_MOVE,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_SCORE,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_SPAWN,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_TELEPORT,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ATTACK_NOW,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_CHANGE_CREW,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_CHANGE_SPIRIT,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_DICE,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_DROP_CREW,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ENTER,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_EXIT,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_PLAYER_SCORE,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_SKILL_CAST,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_DECK_SELECT,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_DECK_SELECT_READY,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_PARTY_UI_READY,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_DECK_SELECT,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_DECK_SELECT_READY,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH_CANCEL,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH_JOIN,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_GO,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_UI_READY,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_UPDATE_PUBLIC,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_PING,
    UNION_RTS_OVERLORD_RTS_C2S_REQ_PLAY_READY,
    UNION_RTS_OVERLORD_RTS_IC_IC_BT_ACTOR_MOVE,
    UNION_RTS_OVERLORD_RTS_IC_IC_BT_ACTOR_RESPAWN,
    UNION_RTS_OVERLORD_RTS_IC_IC_NPCHOST_STEP_ON,
    UNION_RTS_OVERLORD_RTS_IC_IC_SPAWN_NPC,
    UNION_RTS_OVERLORD_RTS_IC_NPC_HANDLER_JOIN,
    UNION_RTS_OVERLORD_RTS_IC_ROOM_DISPOSE,
    UNION_RTS_OVERLORD_RTS_IC_ROOM_JOIN,
    UNION_RTS_OVERLORD_RTS_IC_ROOM_PLAYER,
    UNION_RTS_OVERLORD_RTS_IC_ROOM_PLAYER_DISCONNECTED,
    UNION_RTS_OVERLORD_RTS_IC_ROOM_REJOIN,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_AUTH,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_CREATE,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_DESPAWN,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_DISAPPEAR,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_FORMATION,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_MEDAL_UPDATE,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_RESPAWN,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_SPAWN,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_TELEPORT,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_UPDATE,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ATTACK_NORMAL,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ATTACK_NOW,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_CHANGE_CREW,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_CHANGE_SPIRIT,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_COUNT,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_NUM,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_OPEN,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_RESULT,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DOOR_EVENT,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DROP_CREW,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_NEW_PLAYER,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_ACTIVATED,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_BLOCKED,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED_INTERVAL,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_SCORE,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_UPDATE,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_PLAYER_SCORE,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_SKILL_UPDATE,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_TIME_REMAIN,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_TEAM_POINT_UPDATE,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ZONE_EVENT,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ZONE_STATE,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_CINEMATIC_DONE,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_COMMON_ERROR,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_COST_UPDATE_AVATAR,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_SELECT,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_SELECT_READY,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_TIME_REMAIN,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_MATCHED,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_CACHED_DONE,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SCENE_LOADED,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SELECT,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SELECT_READY,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_DISCONNECTED,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_MATCHED,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_MATCH_ROUND,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_GO,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_LEADER_SLOT,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_PLAYER,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_PLAYER_EXIT,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_UPDATE_PUBLIC,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_COUNT,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_READY,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_SEND_RESULT,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_START,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_TIMEOUT,
    UNION_RTS_OVERLORD_RTS_S2C_ACK_STEP_GO,
    UNION_RTS_OVERLORD_RTS_S2C_CHAT_CHANNEL_ENTER,
    UNION_RTS_OVERLORD_RTS_S2C_CHAT_CHANNEL_EXIT,
    UNION_RTS_OVERLORD_RTS_S2C_CHAT_MESSAGE,
    UNION_RTS_OVERLORD_RTS_S2C_CHAT_SUBSCRIBED,
    UNION_RTS_OVERLORD_RTS_S2C_CHAT_UNSUBSCRIBED,
    UNION_RTS_OVERLORD_RTS_S2C_REQ_CINEMATIC_PLAY,
    UNION_RTS_OVERLORD_RTS_S2C_REQ_STEP_READY
  };
  return values;
}

inline const char **EnumNamesUNION_RTS() {
  static const char *names[] = {
    "NONE",
    "OVERLORD_RTS_C2S_ACK_CINEMATIC_DONE",
    "OVERLORD_RTS_C2S_ACK_STEP_AND_GO",
    "OVERLORD_RTS_C2S_CHAT_CHANNEL_MOVE",
    "OVERLORD_RTS_C2S_CHAT_MESSAGE",
    "OVERLORD_RTS_C2S_CHAT_SUBSCRIBE",
    "OVERLORD_RTS_C2S_REQ_AUTH",
    "OVERLORD_RTS_C2S_REQ_BT_ACTOR_CREATE",
    "OVERLORD_RTS_C2S_REQ_BT_ACTOR_FORMATION",
    "OVERLORD_RTS_C2S_REQ_BT_ACTOR_MOVE",
    "OVERLORD_RTS_C2S_REQ_BT_ACTOR_SCORE",
    "OVERLORD_RTS_C2S_REQ_BT_ACTOR_SPAWN",
    "OVERLORD_RTS_C2S_REQ_BT_ACTOR_TELEPORT",
    "OVERLORD_RTS_C2S_REQ_BT_ATTACK_NOW",
    "OVERLORD_RTS_C2S_REQ_BT_CHANGE_CREW",
    "OVERLORD_RTS_C2S_REQ_BT_CHANGE_SPIRIT",
    "OVERLORD_RTS_C2S_REQ_BT_DICE",
    "OVERLORD_RTS_C2S_REQ_BT_DROP_CREW",
    "OVERLORD_RTS_C2S_REQ_BT_ENTER",
    "OVERLORD_RTS_C2S_REQ_BT_EXIT",
    "OVERLORD_RTS_C2S_REQ_BT_PLAYER_SCORE",
    "OVERLORD_RTS_C2S_REQ_BT_SKILL_CAST",
    "OVERLORD_RTS_C2S_REQ_CS_DECK_SELECT",
    "OVERLORD_RTS_C2S_REQ_CS_DECK_SELECT_READY",
    "OVERLORD_RTS_C2S_REQ_CS_PARTY_UI_READY",
    "OVERLORD_RTS_C2S_REQ_DECK_SELECT",
    "OVERLORD_RTS_C2S_REQ_DECK_SELECT_READY",
    "OVERLORD_RTS_C2S_REQ_MATCH",
    "OVERLORD_RTS_C2S_REQ_MATCH_CANCEL",
    "OVERLORD_RTS_C2S_REQ_MATCH_JOIN",
    "OVERLORD_RTS_C2S_REQ_PARTY_GO",
    "OVERLORD_RTS_C2S_REQ_PARTY_UI_READY",
    "OVERLORD_RTS_C2S_REQ_PARTY_UPDATE_PUBLIC",
    "OVERLORD_RTS_C2S_REQ_PING",
    "OVERLORD_RTS_C2S_REQ_PLAY_READY",
    "OVERLORD_RTS_IC_IC_BT_ACTOR_MOVE",
    "OVERLORD_RTS_IC_IC_BT_ACTOR_RESPAWN",
    "OVERLORD_RTS_IC_IC_NPCHOST_STEP_ON",
    "OVERLORD_RTS_IC_IC_SPAWN_NPC",
    "OVERLORD_RTS_IC_NPC_HANDLER_JOIN",
    "OVERLORD_RTS_IC_ROOM_DISPOSE",
    "OVERLORD_RTS_IC_ROOM_JOIN",
    "OVERLORD_RTS_IC_ROOM_PLAYER",
    "OVERLORD_RTS_IC_ROOM_PLAYER_DISCONNECTED",
    "OVERLORD_RTS_IC_ROOM_REJOIN",
    "OVERLORD_RTS_S2C_ACK_AUTH",
    "OVERLORD_RTS_S2C_ACK_BT_ACTOR_CREATE",
    "OVERLORD_RTS_S2C_ACK_BT_ACTOR_DESPAWN",
    "OVERLORD_RTS_S2C_ACK_BT_ACTOR_DISAPPEAR",
    "OVERLORD_RTS_S2C_ACK_BT_ACTOR_FORMATION",
    "OVERLORD_RTS_S2C_ACK_BT_ACTOR_MEDAL_UPDATE",
    "OVERLORD_RTS_S2C_ACK_BT_ACTOR_RESPAWN",
    "OVERLORD_RTS_S2C_ACK_BT_ACTOR_SPAWN",
    "OVERLORD_RTS_S2C_ACK_BT_ACTOR_TELEPORT",
    "OVERLORD_RTS_S2C_ACK_BT_ACTOR_UPDATE",
    "OVERLORD_RTS_S2C_ACK_BT_ATTACK_NORMAL",
    "OVERLORD_RTS_S2C_ACK_BT_ATTACK_NOW",
    "OVERLORD_RTS_S2C_ACK_BT_CHANGE_CREW",
    "OVERLORD_RTS_S2C_ACK_BT_CHANGE_SPIRIT",
    "OVERLORD_RTS_S2C_ACK_BT_DICE_COUNT",
    "OVERLORD_RTS_S2C_ACK_BT_DICE_NUM",
    "OVERLORD_RTS_S2C_ACK_BT_DICE_OPEN",
    "OVERLORD_RTS_S2C_ACK_BT_DICE_RESULT",
    "OVERLORD_RTS_S2C_ACK_BT_DOOR_EVENT",
    "OVERLORD_RTS_S2C_ACK_BT_DROP_CREW",
    "OVERLORD_RTS_S2C_ACK_BT_NEW_PLAYER",
    "OVERLORD_RTS_S2C_ACK_BT_SKILL_ACTIVATED",
    "OVERLORD_RTS_S2C_ACK_BT_SKILL_BLOCKED",
    "OVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED",
    "OVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED_INTERVAL",
    "OVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_SCORE",
    "OVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_UPDATE",
    "OVERLORD_RTS_S2C_ACK_BT_SYNC_PLAYER_SCORE",
    "OVERLORD_RTS_S2C_ACK_BT_SYNC_SKILL_UPDATE",
    "OVERLORD_RTS_S2C_ACK_BT_SYNC_TIME_REMAIN",
    "OVERLORD_RTS_S2C_ACK_BT_TEAM_POINT_UPDATE",
    "OVERLORD_RTS_S2C_ACK_BT_ZONE_EVENT",
    "OVERLORD_RTS_S2C_ACK_BT_ZONE_STATE",
    "OVERLORD_RTS_S2C_ACK_CINEMATIC_DONE",
    "OVERLORD_RTS_S2C_ACK_COMMON_ERROR",
    "OVERLORD_RTS_S2C_ACK_COST_UPDATE_AVATAR",
    "OVERLORD_RTS_S2C_ACK_CS_DECK_SELECT",
    "OVERLORD_RTS_S2C_ACK_CS_DECK_SELECT_READY",
    "OVERLORD_RTS_S2C_ACK_CS_DECK_TIME_REMAIN",
    "OVERLORD_RTS_S2C_ACK_CS_MATCHED",
    "OVERLORD_RTS_S2C_ACK_DECK_CACHED_DONE",
    "OVERLORD_RTS_S2C_ACK_DECK_SCENE_LOADED",
    "OVERLORD_RTS_S2C_ACK_DECK_SELECT",
    "OVERLORD_RTS_S2C_ACK_DECK_SELECT_READY",
    "OVERLORD_RTS_S2C_ACK_DISCONNECTED",
    "OVERLORD_RTS_S2C_ACK_MATCHED",
    "OVERLORD_RTS_S2C_ACK_MATCH_ROUND",
    "OVERLORD_RTS_S2C_ACK_PARTY_GO",
    "OVERLORD_RTS_S2C_ACK_PARTY_LEADER_SLOT",
    "OVERLORD_RTS_S2C_ACK_PARTY_PLAYER",
    "OVERLORD_RTS_S2C_ACK_PARTY_PLAYER_EXIT",
    "OVERLORD_RTS_S2C_ACK_PARTY_UPDATE_PUBLIC",
    "OVERLORD_RTS_S2C_ACK_PLAY_COUNT",
    "OVERLORD_RTS_S2C_ACK_PLAY_READY",
    "OVERLORD_RTS_S2C_ACK_PLAY_SEND_RESULT",
    "OVERLORD_RTS_S2C_ACK_PLAY_START",
    "OVERLORD_RTS_S2C_ACK_PLAY_TIMEOUT",
    "OVERLORD_RTS_S2C_ACK_STEP_GO",
    "OVERLORD_RTS_S2C_CHAT_CHANNEL_ENTER",
    "OVERLORD_RTS_S2C_CHAT_CHANNEL_EXIT",
    "OVERLORD_RTS_S2C_CHAT_MESSAGE",
    "OVERLORD_RTS_S2C_CHAT_SUBSCRIBED",
    "OVERLORD_RTS_S2C_CHAT_UNSUBSCRIBED",
    "OVERLORD_RTS_S2C_REQ_CINEMATIC_PLAY",
    "OVERLORD_RTS_S2C_REQ_STEP_READY",
    nullptr
  };
  return names;
}

inline const char *EnumNameUNION_RTS(UNION_RTS e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesUNION_RTS()[index];
}

template<typename T> struct UNION_RTSTraits {
  static const UNION_RTS enum_value = UNION_RTS_NONE;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::ACK_CINEMATIC_DONE> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_ACK_CINEMATIC_DONE;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::ACK_STEP_AND_GO> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_ACK_STEP_AND_GO;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::CHAT_CHANNEL_MOVE> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_CHAT_CHANNEL_MOVE;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::CHAT_MESSAGE> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_CHAT_MESSAGE;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::CHAT_SUBSCRIBE> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_CHAT_SUBSCRIBE;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_AUTH> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_AUTH;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_BT_ACTOR_CREATE> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_CREATE;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_BT_ACTOR_FORMATION> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_FORMATION;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_BT_ACTOR_MOVE> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_MOVE;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_BT_ACTOR_SCORE> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_SCORE;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_BT_ACTOR_SPAWN> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_SPAWN;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_BT_ACTOR_TELEPORT> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_TELEPORT;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_BT_ATTACK_NOW> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ATTACK_NOW;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_BT_CHANGE_CREW> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_CHANGE_CREW;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_BT_CHANGE_SPIRIT> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_CHANGE_SPIRIT;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_BT_DICE> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_DICE;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_BT_DROP_CREW> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_DROP_CREW;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_BT_ENTER> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ENTER;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_BT_EXIT> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_EXIT;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_BT_PLAYER_SCORE> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_PLAYER_SCORE;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_BT_SKILL_CAST> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_SKILL_CAST;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_CS_DECK_SELECT> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_DECK_SELECT;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_CS_DECK_SELECT_READY> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_DECK_SELECT_READY;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_CS_PARTY_UI_READY> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_PARTY_UI_READY;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_DECK_SELECT> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_DECK_SELECT;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_DECK_SELECT_READY> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_DECK_SELECT_READY;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_MATCH> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_MATCH_CANCEL> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH_CANCEL;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_MATCH_JOIN> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH_JOIN;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_PARTY_GO> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_GO;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_PARTY_UI_READY> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_UI_READY;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_PARTY_UPDATE_PUBLIC> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_UPDATE_PUBLIC;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_PING> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_PING;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::C2S::REQ_PLAY_READY> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_C2S_REQ_PLAY_READY;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::IC::IC_BT_ACTOR_MOVE> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_IC_IC_BT_ACTOR_MOVE;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::IC::IC_BT_ACTOR_RESPAWN> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_IC_IC_BT_ACTOR_RESPAWN;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::IC::IC_NPCHOST_STEP_ON> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_IC_IC_NPCHOST_STEP_ON;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::IC::IC_SPAWN_NPC> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_IC_IC_SPAWN_NPC;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::IC::NPC_HANDLER_JOIN> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_IC_NPC_HANDLER_JOIN;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::IC::ROOM_DISPOSE> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_IC_ROOM_DISPOSE;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::IC::ROOM_JOIN> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_IC_ROOM_JOIN;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::IC::ROOM_PLAYER> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_IC_ROOM_PLAYER;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::IC::ROOM_PLAYER_DISCONNECTED> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_IC_ROOM_PLAYER_DISCONNECTED;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::IC::ROOM_REJOIN> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_IC_ROOM_REJOIN;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_AUTH> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_AUTH;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_ACTOR_CREATE> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_CREATE;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_ACTOR_DESPAWN> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_DESPAWN;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_ACTOR_DISAPPEAR> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_DISAPPEAR;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_ACTOR_FORMATION> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_FORMATION;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_ACTOR_MEDAL_UPDATE> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_MEDAL_UPDATE;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_ACTOR_RESPAWN> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_RESPAWN;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_ACTOR_SPAWN> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_SPAWN;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_ACTOR_TELEPORT> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_TELEPORT;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_ACTOR_UPDATE> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_UPDATE;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_ATTACK_NORMAL> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ATTACK_NORMAL;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_ATTACK_NOW> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ATTACK_NOW;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_CHANGE_CREW> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_CHANGE_CREW;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_CHANGE_SPIRIT> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_CHANGE_SPIRIT;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_DICE_COUNT> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_COUNT;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_DICE_NUM> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_NUM;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_DICE_OPEN> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_OPEN;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_DICE_RESULT> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_RESULT;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_DOOR_EVENT> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DOOR_EVENT;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_DROP_CREW> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DROP_CREW;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_NEW_PLAYER> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_NEW_PLAYER;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_SKILL_ACTIVATED> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_ACTIVATED;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_SKILL_BLOCKED> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_BLOCKED;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_SKILL_CASTED> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_SKILL_CASTED_INTERVAL> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED_INTERVAL;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_SYNC_ACTOR_SCORE> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_SCORE;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_SYNC_ACTOR_UPDATE> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_UPDATE;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_SYNC_PLAYER_SCORE> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_PLAYER_SCORE;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_SYNC_SKILL_UPDATE> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_SKILL_UPDATE;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_SYNC_TIME_REMAIN> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_TIME_REMAIN;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_TEAM_POINT_UPDATE> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_TEAM_POINT_UPDATE;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_ZONE_EVENT> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ZONE_EVENT;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_BT_ZONE_STATE> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ZONE_STATE;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_CINEMATIC_DONE> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_CINEMATIC_DONE;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_COMMON_ERROR> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_COMMON_ERROR;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_COST_UPDATE_AVATAR> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_COST_UPDATE_AVATAR;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_CS_DECK_SELECT> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_SELECT;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_CS_DECK_SELECT_READY> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_SELECT_READY;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_CS_DECK_TIME_REMAIN> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_TIME_REMAIN;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_CS_MATCHED> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_MATCHED;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_DECK_CACHED_DONE> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_CACHED_DONE;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_DECK_SCENE_LOADED> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SCENE_LOADED;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_DECK_SELECT> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SELECT;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_DECK_SELECT_READY> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SELECT_READY;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_DISCONNECTED> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_DISCONNECTED;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_MATCHED> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_MATCHED;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_MATCH_ROUND> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_MATCH_ROUND;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_PARTY_GO> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_GO;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_PARTY_LEADER_SLOT> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_LEADER_SLOT;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_PARTY_PLAYER> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_PLAYER;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_PARTY_PLAYER_EXIT> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_PLAYER_EXIT;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_PARTY_UPDATE_PUBLIC> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_UPDATE_PUBLIC;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_PLAY_COUNT> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_COUNT;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_PLAY_READY> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_READY;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_PLAY_SEND_RESULT> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_SEND_RESULT;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_PLAY_START> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_START;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_PLAY_TIMEOUT> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_TIMEOUT;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::ACK_STEP_GO> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_ACK_STEP_GO;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::CHAT_CHANNEL_ENTER> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_CHAT_CHANNEL_ENTER;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::CHAT_CHANNEL_EXIT> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_CHAT_CHANNEL_EXIT;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::CHAT_MESSAGE> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_CHAT_MESSAGE;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::CHAT_SUBSCRIBED> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_CHAT_SUBSCRIBED;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::CHAT_UNSUBSCRIBED> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_CHAT_UNSUBSCRIBED;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::REQ_CINEMATIC_PLAY> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_REQ_CINEMATIC_PLAY;
};

template<> struct UNION_RTSTraits<OVERLORD::RTS::S2C::REQ_STEP_READY> {
  static const UNION_RTS enum_value = UNION_RTS_OVERLORD_RTS_S2C_REQ_STEP_READY;
};

struct UNION_RTSUnion {
  UNION_RTS type;
  void *value;

  UNION_RTSUnion() : type(UNION_RTS_NONE), value(nullptr) {}
  UNION_RTSUnion(UNION_RTSUnion&& u) FLATBUFFERS_NOEXCEPT :
    type(UNION_RTS_NONE), value(nullptr)
    { std::swap(type, u.type); std::swap(value, u.value); }
  UNION_RTSUnion(const UNION_RTSUnion &) FLATBUFFERS_NOEXCEPT;
  UNION_RTSUnion &operator=(const UNION_RTSUnion &u) FLATBUFFERS_NOEXCEPT
    { UNION_RTSUnion t(u); std::swap(type, t.type); std::swap(value, t.value); return *this; }
  UNION_RTSUnion &operator=(UNION_RTSUnion &&u) FLATBUFFERS_NOEXCEPT
    { std::swap(type, u.type); std::swap(value, u.value); return *this; }
  ~UNION_RTSUnion() { Reset(); }

  void Reset();

#ifndef FLATBUFFERS_CPP98_STL
  template <typename T>
  void Set(T&& val) {
    Reset();
    type = UNION_RTSTraits<typename T::TableType>::enum_value;
    if (type != UNION_RTS_NONE) {
      value = new T(std::forward<T>(val));
    }
  }
#endif  // FLATBUFFERS_CPP98_STL

  static void *UnPack(const void *obj, UNION_RTS type, const flatbuffers::resolver_function_t *resolver);
  flatbuffers::Offset<void> Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbuffers::rehasher_function_t *_rehasher = nullptr) const;

  OVERLORD::RTS::C2S::ACK_CINEMATIC_DONET *AsOVERLORD_RTS_C2S_ACK_CINEMATIC_DONE() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_ACK_CINEMATIC_DONE ?
      reinterpret_cast<OVERLORD::RTS::C2S::ACK_CINEMATIC_DONET *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::ACK_CINEMATIC_DONET *AsOVERLORD_RTS_C2S_ACK_CINEMATIC_DONE() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_ACK_CINEMATIC_DONE ?
      reinterpret_cast<const OVERLORD::RTS::C2S::ACK_CINEMATIC_DONET *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::ACK_STEP_AND_GOT *AsOVERLORD_RTS_C2S_ACK_STEP_AND_GO() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_ACK_STEP_AND_GO ?
      reinterpret_cast<OVERLORD::RTS::C2S::ACK_STEP_AND_GOT *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::ACK_STEP_AND_GOT *AsOVERLORD_RTS_C2S_ACK_STEP_AND_GO() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_ACK_STEP_AND_GO ?
      reinterpret_cast<const OVERLORD::RTS::C2S::ACK_STEP_AND_GOT *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::CHAT_CHANNEL_MOVET *AsOVERLORD_RTS_C2S_CHAT_CHANNEL_MOVE() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_CHAT_CHANNEL_MOVE ?
      reinterpret_cast<OVERLORD::RTS::C2S::CHAT_CHANNEL_MOVET *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::CHAT_CHANNEL_MOVET *AsOVERLORD_RTS_C2S_CHAT_CHANNEL_MOVE() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_CHAT_CHANNEL_MOVE ?
      reinterpret_cast<const OVERLORD::RTS::C2S::CHAT_CHANNEL_MOVET *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::CHAT_MESSAGET *AsOVERLORD_RTS_C2S_CHAT_MESSAGE() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_CHAT_MESSAGE ?
      reinterpret_cast<OVERLORD::RTS::C2S::CHAT_MESSAGET *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::CHAT_MESSAGET *AsOVERLORD_RTS_C2S_CHAT_MESSAGE() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_CHAT_MESSAGE ?
      reinterpret_cast<const OVERLORD::RTS::C2S::CHAT_MESSAGET *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::CHAT_SUBSCRIBET *AsOVERLORD_RTS_C2S_CHAT_SUBSCRIBE() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_CHAT_SUBSCRIBE ?
      reinterpret_cast<OVERLORD::RTS::C2S::CHAT_SUBSCRIBET *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::CHAT_SUBSCRIBET *AsOVERLORD_RTS_C2S_CHAT_SUBSCRIBE() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_CHAT_SUBSCRIBE ?
      reinterpret_cast<const OVERLORD::RTS::C2S::CHAT_SUBSCRIBET *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_AUTHT *AsOVERLORD_RTS_C2S_REQ_AUTH() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_AUTH ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_AUTHT *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_AUTHT *AsOVERLORD_RTS_C2S_REQ_AUTH() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_AUTH ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_AUTHT *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_BT_ACTOR_CREATET *AsOVERLORD_RTS_C2S_REQ_BT_ACTOR_CREATE() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_CREATE ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_ACTOR_CREATET *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_ACTOR_CREATET *AsOVERLORD_RTS_C2S_REQ_BT_ACTOR_CREATE() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_CREATE ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_CREATET *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_BT_ACTOR_FORMATIONT *AsOVERLORD_RTS_C2S_REQ_BT_ACTOR_FORMATION() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_FORMATION ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_ACTOR_FORMATIONT *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_ACTOR_FORMATIONT *AsOVERLORD_RTS_C2S_REQ_BT_ACTOR_FORMATION() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_FORMATION ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_FORMATIONT *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_BT_ACTOR_MOVET *AsOVERLORD_RTS_C2S_REQ_BT_ACTOR_MOVE() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_MOVE ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_ACTOR_MOVET *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_ACTOR_MOVET *AsOVERLORD_RTS_C2S_REQ_BT_ACTOR_MOVE() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_MOVE ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_MOVET *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_BT_ACTOR_SCORET *AsOVERLORD_RTS_C2S_REQ_BT_ACTOR_SCORE() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_SCORE ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_ACTOR_SCORET *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_ACTOR_SCORET *AsOVERLORD_RTS_C2S_REQ_BT_ACTOR_SCORE() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_SCORE ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_SCORET *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_BT_ACTOR_SPAWNT *AsOVERLORD_RTS_C2S_REQ_BT_ACTOR_SPAWN() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_SPAWN ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_ACTOR_SPAWNT *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_ACTOR_SPAWNT *AsOVERLORD_RTS_C2S_REQ_BT_ACTOR_SPAWN() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_SPAWN ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_SPAWNT *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_BT_ACTOR_TELEPORTT *AsOVERLORD_RTS_C2S_REQ_BT_ACTOR_TELEPORT() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_TELEPORT ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_ACTOR_TELEPORTT *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_ACTOR_TELEPORTT *AsOVERLORD_RTS_C2S_REQ_BT_ACTOR_TELEPORT() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_TELEPORT ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_TELEPORTT *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_BT_ATTACK_NOWT *AsOVERLORD_RTS_C2S_REQ_BT_ATTACK_NOW() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ATTACK_NOW ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_ATTACK_NOWT *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_ATTACK_NOWT *AsOVERLORD_RTS_C2S_REQ_BT_ATTACK_NOW() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ATTACK_NOW ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ATTACK_NOWT *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_BT_CHANGE_CREWT *AsOVERLORD_RTS_C2S_REQ_BT_CHANGE_CREW() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_CHANGE_CREW ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_CHANGE_CREWT *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_CHANGE_CREWT *AsOVERLORD_RTS_C2S_REQ_BT_CHANGE_CREW() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_CHANGE_CREW ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_CHANGE_CREWT *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_BT_CHANGE_SPIRITT *AsOVERLORD_RTS_C2S_REQ_BT_CHANGE_SPIRIT() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_CHANGE_SPIRIT ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_CHANGE_SPIRITT *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_CHANGE_SPIRITT *AsOVERLORD_RTS_C2S_REQ_BT_CHANGE_SPIRIT() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_CHANGE_SPIRIT ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_CHANGE_SPIRITT *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_BT_DICET *AsOVERLORD_RTS_C2S_REQ_BT_DICE() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_DICE ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_DICET *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_DICET *AsOVERLORD_RTS_C2S_REQ_BT_DICE() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_DICE ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_DICET *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_BT_DROP_CREWT *AsOVERLORD_RTS_C2S_REQ_BT_DROP_CREW() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_DROP_CREW ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_DROP_CREWT *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_DROP_CREWT *AsOVERLORD_RTS_C2S_REQ_BT_DROP_CREW() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_DROP_CREW ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_DROP_CREWT *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_BT_ENTERT *AsOVERLORD_RTS_C2S_REQ_BT_ENTER() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ENTER ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_ENTERT *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_ENTERT *AsOVERLORD_RTS_C2S_REQ_BT_ENTER() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ENTER ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ENTERT *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_BT_EXITT *AsOVERLORD_RTS_C2S_REQ_BT_EXIT() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_EXIT ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_EXITT *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_EXITT *AsOVERLORD_RTS_C2S_REQ_BT_EXIT() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_EXIT ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_EXITT *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_BT_PLAYER_SCORET *AsOVERLORD_RTS_C2S_REQ_BT_PLAYER_SCORE() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_PLAYER_SCORE ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_PLAYER_SCORET *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_PLAYER_SCORET *AsOVERLORD_RTS_C2S_REQ_BT_PLAYER_SCORE() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_PLAYER_SCORE ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_PLAYER_SCORET *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_BT_SKILL_CASTT *AsOVERLORD_RTS_C2S_REQ_BT_SKILL_CAST() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_SKILL_CAST ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_SKILL_CASTT *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_SKILL_CASTT *AsOVERLORD_RTS_C2S_REQ_BT_SKILL_CAST() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_SKILL_CAST ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_SKILL_CASTT *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_CS_DECK_SELECTT *AsOVERLORD_RTS_C2S_REQ_CS_DECK_SELECT() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_DECK_SELECT ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_CS_DECK_SELECTT *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_CS_DECK_SELECTT *AsOVERLORD_RTS_C2S_REQ_CS_DECK_SELECT() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_DECK_SELECT ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_CS_DECK_SELECTT *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_CS_DECK_SELECT_READYT *AsOVERLORD_RTS_C2S_REQ_CS_DECK_SELECT_READY() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_DECK_SELECT_READY ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_CS_DECK_SELECT_READYT *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_CS_DECK_SELECT_READYT *AsOVERLORD_RTS_C2S_REQ_CS_DECK_SELECT_READY() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_DECK_SELECT_READY ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_CS_DECK_SELECT_READYT *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_CS_PARTY_UI_READYT *AsOVERLORD_RTS_C2S_REQ_CS_PARTY_UI_READY() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_PARTY_UI_READY ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_CS_PARTY_UI_READYT *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_CS_PARTY_UI_READYT *AsOVERLORD_RTS_C2S_REQ_CS_PARTY_UI_READY() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_PARTY_UI_READY ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_CS_PARTY_UI_READYT *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_DECK_SELECTT *AsOVERLORD_RTS_C2S_REQ_DECK_SELECT() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_DECK_SELECT ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_DECK_SELECTT *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_DECK_SELECTT *AsOVERLORD_RTS_C2S_REQ_DECK_SELECT() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_DECK_SELECT ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_DECK_SELECTT *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_DECK_SELECT_READYT *AsOVERLORD_RTS_C2S_REQ_DECK_SELECT_READY() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_DECK_SELECT_READY ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_DECK_SELECT_READYT *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_DECK_SELECT_READYT *AsOVERLORD_RTS_C2S_REQ_DECK_SELECT_READY() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_DECK_SELECT_READY ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_DECK_SELECT_READYT *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_MATCHT *AsOVERLORD_RTS_C2S_REQ_MATCH() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_MATCHT *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_MATCHT *AsOVERLORD_RTS_C2S_REQ_MATCH() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_MATCHT *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_MATCH_CANCELT *AsOVERLORD_RTS_C2S_REQ_MATCH_CANCEL() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH_CANCEL ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_MATCH_CANCELT *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_MATCH_CANCELT *AsOVERLORD_RTS_C2S_REQ_MATCH_CANCEL() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH_CANCEL ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_MATCH_CANCELT *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_MATCH_JOINT *AsOVERLORD_RTS_C2S_REQ_MATCH_JOIN() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH_JOIN ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_MATCH_JOINT *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_MATCH_JOINT *AsOVERLORD_RTS_C2S_REQ_MATCH_JOIN() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH_JOIN ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_MATCH_JOINT *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_PARTY_GOT *AsOVERLORD_RTS_C2S_REQ_PARTY_GO() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_GO ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_PARTY_GOT *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_PARTY_GOT *AsOVERLORD_RTS_C2S_REQ_PARTY_GO() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_GO ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_PARTY_GOT *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_PARTY_UI_READYT *AsOVERLORD_RTS_C2S_REQ_PARTY_UI_READY() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_UI_READY ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_PARTY_UI_READYT *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_PARTY_UI_READYT *AsOVERLORD_RTS_C2S_REQ_PARTY_UI_READY() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_UI_READY ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_PARTY_UI_READYT *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_PARTY_UPDATE_PUBLICT *AsOVERLORD_RTS_C2S_REQ_PARTY_UPDATE_PUBLIC() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_UPDATE_PUBLIC ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_PARTY_UPDATE_PUBLICT *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_PARTY_UPDATE_PUBLICT *AsOVERLORD_RTS_C2S_REQ_PARTY_UPDATE_PUBLIC() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_UPDATE_PUBLIC ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_PARTY_UPDATE_PUBLICT *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_PINGT *AsOVERLORD_RTS_C2S_REQ_PING() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_PING ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_PINGT *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_PINGT *AsOVERLORD_RTS_C2S_REQ_PING() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_PING ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_PINGT *>(value) : nullptr;
  }
  OVERLORD::RTS::C2S::REQ_PLAY_READYT *AsOVERLORD_RTS_C2S_REQ_PLAY_READY() {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_PLAY_READY ?
      reinterpret_cast<OVERLORD::RTS::C2S::REQ_PLAY_READYT *>(value) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_PLAY_READYT *AsOVERLORD_RTS_C2S_REQ_PLAY_READY() const {
    return type == UNION_RTS_OVERLORD_RTS_C2S_REQ_PLAY_READY ?
      reinterpret_cast<const OVERLORD::RTS::C2S::REQ_PLAY_READYT *>(value) : nullptr;
  }
  OVERLORD::RTS::IC::IC_BT_ACTOR_MOVET *AsOVERLORD_RTS_IC_IC_BT_ACTOR_MOVE() {
    return type == UNION_RTS_OVERLORD_RTS_IC_IC_BT_ACTOR_MOVE ?
      reinterpret_cast<OVERLORD::RTS::IC::IC_BT_ACTOR_MOVET *>(value) : nullptr;
  }
  const OVERLORD::RTS::IC::IC_BT_ACTOR_MOVET *AsOVERLORD_RTS_IC_IC_BT_ACTOR_MOVE() const {
    return type == UNION_RTS_OVERLORD_RTS_IC_IC_BT_ACTOR_MOVE ?
      reinterpret_cast<const OVERLORD::RTS::IC::IC_BT_ACTOR_MOVET *>(value) : nullptr;
  }
  OVERLORD::RTS::IC::IC_BT_ACTOR_RESPAWNT *AsOVERLORD_RTS_IC_IC_BT_ACTOR_RESPAWN() {
    return type == UNION_RTS_OVERLORD_RTS_IC_IC_BT_ACTOR_RESPAWN ?
      reinterpret_cast<OVERLORD::RTS::IC::IC_BT_ACTOR_RESPAWNT *>(value) : nullptr;
  }
  const OVERLORD::RTS::IC::IC_BT_ACTOR_RESPAWNT *AsOVERLORD_RTS_IC_IC_BT_ACTOR_RESPAWN() const {
    return type == UNION_RTS_OVERLORD_RTS_IC_IC_BT_ACTOR_RESPAWN ?
      reinterpret_cast<const OVERLORD::RTS::IC::IC_BT_ACTOR_RESPAWNT *>(value) : nullptr;
  }
  OVERLORD::RTS::IC::IC_NPCHOST_STEP_ONT *AsOVERLORD_RTS_IC_IC_NPCHOST_STEP_ON() {
    return type == UNION_RTS_OVERLORD_RTS_IC_IC_NPCHOST_STEP_ON ?
      reinterpret_cast<OVERLORD::RTS::IC::IC_NPCHOST_STEP_ONT *>(value) : nullptr;
  }
  const OVERLORD::RTS::IC::IC_NPCHOST_STEP_ONT *AsOVERLORD_RTS_IC_IC_NPCHOST_STEP_ON() const {
    return type == UNION_RTS_OVERLORD_RTS_IC_IC_NPCHOST_STEP_ON ?
      reinterpret_cast<const OVERLORD::RTS::IC::IC_NPCHOST_STEP_ONT *>(value) : nullptr;
  }
  OVERLORD::RTS::IC::IC_SPAWN_NPCT *AsOVERLORD_RTS_IC_IC_SPAWN_NPC() {
    return type == UNION_RTS_OVERLORD_RTS_IC_IC_SPAWN_NPC ?
      reinterpret_cast<OVERLORD::RTS::IC::IC_SPAWN_NPCT *>(value) : nullptr;
  }
  const OVERLORD::RTS::IC::IC_SPAWN_NPCT *AsOVERLORD_RTS_IC_IC_SPAWN_NPC() const {
    return type == UNION_RTS_OVERLORD_RTS_IC_IC_SPAWN_NPC ?
      reinterpret_cast<const OVERLORD::RTS::IC::IC_SPAWN_NPCT *>(value) : nullptr;
  }
  OVERLORD::RTS::IC::NPC_HANDLER_JOINT *AsOVERLORD_RTS_IC_NPC_HANDLER_JOIN() {
    return type == UNION_RTS_OVERLORD_RTS_IC_NPC_HANDLER_JOIN ?
      reinterpret_cast<OVERLORD::RTS::IC::NPC_HANDLER_JOINT *>(value) : nullptr;
  }
  const OVERLORD::RTS::IC::NPC_HANDLER_JOINT *AsOVERLORD_RTS_IC_NPC_HANDLER_JOIN() const {
    return type == UNION_RTS_OVERLORD_RTS_IC_NPC_HANDLER_JOIN ?
      reinterpret_cast<const OVERLORD::RTS::IC::NPC_HANDLER_JOINT *>(value) : nullptr;
  }
  OVERLORD::RTS::IC::ROOM_DISPOSET *AsOVERLORD_RTS_IC_ROOM_DISPOSE() {
    return type == UNION_RTS_OVERLORD_RTS_IC_ROOM_DISPOSE ?
      reinterpret_cast<OVERLORD::RTS::IC::ROOM_DISPOSET *>(value) : nullptr;
  }
  const OVERLORD::RTS::IC::ROOM_DISPOSET *AsOVERLORD_RTS_IC_ROOM_DISPOSE() const {
    return type == UNION_RTS_OVERLORD_RTS_IC_ROOM_DISPOSE ?
      reinterpret_cast<const OVERLORD::RTS::IC::ROOM_DISPOSET *>(value) : nullptr;
  }
  OVERLORD::RTS::IC::ROOM_JOINT *AsOVERLORD_RTS_IC_ROOM_JOIN() {
    return type == UNION_RTS_OVERLORD_RTS_IC_ROOM_JOIN ?
      reinterpret_cast<OVERLORD::RTS::IC::ROOM_JOINT *>(value) : nullptr;
  }
  const OVERLORD::RTS::IC::ROOM_JOINT *AsOVERLORD_RTS_IC_ROOM_JOIN() const {
    return type == UNION_RTS_OVERLORD_RTS_IC_ROOM_JOIN ?
      reinterpret_cast<const OVERLORD::RTS::IC::ROOM_JOINT *>(value) : nullptr;
  }
  OVERLORD::RTS::IC::ROOM_PLAYERT *AsOVERLORD_RTS_IC_ROOM_PLAYER() {
    return type == UNION_RTS_OVERLORD_RTS_IC_ROOM_PLAYER ?
      reinterpret_cast<OVERLORD::RTS::IC::ROOM_PLAYERT *>(value) : nullptr;
  }
  const OVERLORD::RTS::IC::ROOM_PLAYERT *AsOVERLORD_RTS_IC_ROOM_PLAYER() const {
    return type == UNION_RTS_OVERLORD_RTS_IC_ROOM_PLAYER ?
      reinterpret_cast<const OVERLORD::RTS::IC::ROOM_PLAYERT *>(value) : nullptr;
  }
  OVERLORD::RTS::IC::ROOM_PLAYER_DISCONNECTEDT *AsOVERLORD_RTS_IC_ROOM_PLAYER_DISCONNECTED() {
    return type == UNION_RTS_OVERLORD_RTS_IC_ROOM_PLAYER_DISCONNECTED ?
      reinterpret_cast<OVERLORD::RTS::IC::ROOM_PLAYER_DISCONNECTEDT *>(value) : nullptr;
  }
  const OVERLORD::RTS::IC::ROOM_PLAYER_DISCONNECTEDT *AsOVERLORD_RTS_IC_ROOM_PLAYER_DISCONNECTED() const {
    return type == UNION_RTS_OVERLORD_RTS_IC_ROOM_PLAYER_DISCONNECTED ?
      reinterpret_cast<const OVERLORD::RTS::IC::ROOM_PLAYER_DISCONNECTEDT *>(value) : nullptr;
  }
  OVERLORD::RTS::IC::ROOM_REJOINT *AsOVERLORD_RTS_IC_ROOM_REJOIN() {
    return type == UNION_RTS_OVERLORD_RTS_IC_ROOM_REJOIN ?
      reinterpret_cast<OVERLORD::RTS::IC::ROOM_REJOINT *>(value) : nullptr;
  }
  const OVERLORD::RTS::IC::ROOM_REJOINT *AsOVERLORD_RTS_IC_ROOM_REJOIN() const {
    return type == UNION_RTS_OVERLORD_RTS_IC_ROOM_REJOIN ?
      reinterpret_cast<const OVERLORD::RTS::IC::ROOM_REJOINT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_AUTHT *AsOVERLORD_RTS_S2C_ACK_AUTH() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_AUTH ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_AUTHT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_AUTHT *AsOVERLORD_RTS_S2C_ACK_AUTH() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_AUTH ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_AUTHT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_ACTOR_CREATET *AsOVERLORD_RTS_S2C_ACK_BT_ACTOR_CREATE() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_CREATE ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_ACTOR_CREATET *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_ACTOR_CREATET *AsOVERLORD_RTS_S2C_ACK_BT_ACTOR_CREATE() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_CREATE ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_CREATET *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_ACTOR_DESPAWNT *AsOVERLORD_RTS_S2C_ACK_BT_ACTOR_DESPAWN() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_DESPAWN ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_ACTOR_DESPAWNT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_ACTOR_DESPAWNT *AsOVERLORD_RTS_S2C_ACK_BT_ACTOR_DESPAWN() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_DESPAWN ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_DESPAWNT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_ACTOR_DISAPPEART *AsOVERLORD_RTS_S2C_ACK_BT_ACTOR_DISAPPEAR() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_DISAPPEAR ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_ACTOR_DISAPPEART *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_ACTOR_DISAPPEART *AsOVERLORD_RTS_S2C_ACK_BT_ACTOR_DISAPPEAR() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_DISAPPEAR ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_DISAPPEART *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_ACTOR_FORMATIONT *AsOVERLORD_RTS_S2C_ACK_BT_ACTOR_FORMATION() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_FORMATION ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_ACTOR_FORMATIONT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_ACTOR_FORMATIONT *AsOVERLORD_RTS_S2C_ACK_BT_ACTOR_FORMATION() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_FORMATION ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_FORMATIONT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_ACTOR_MEDAL_UPDATET *AsOVERLORD_RTS_S2C_ACK_BT_ACTOR_MEDAL_UPDATE() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_MEDAL_UPDATE ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_ACTOR_MEDAL_UPDATET *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_ACTOR_MEDAL_UPDATET *AsOVERLORD_RTS_S2C_ACK_BT_ACTOR_MEDAL_UPDATE() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_MEDAL_UPDATE ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_MEDAL_UPDATET *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_ACTOR_RESPAWNT *AsOVERLORD_RTS_S2C_ACK_BT_ACTOR_RESPAWN() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_RESPAWN ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_ACTOR_RESPAWNT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_ACTOR_RESPAWNT *AsOVERLORD_RTS_S2C_ACK_BT_ACTOR_RESPAWN() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_RESPAWN ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_RESPAWNT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_ACTOR_SPAWNT *AsOVERLORD_RTS_S2C_ACK_BT_ACTOR_SPAWN() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_SPAWN ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_ACTOR_SPAWNT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_ACTOR_SPAWNT *AsOVERLORD_RTS_S2C_ACK_BT_ACTOR_SPAWN() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_SPAWN ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_SPAWNT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_ACTOR_TELEPORTT *AsOVERLORD_RTS_S2C_ACK_BT_ACTOR_TELEPORT() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_TELEPORT ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_ACTOR_TELEPORTT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_ACTOR_TELEPORTT *AsOVERLORD_RTS_S2C_ACK_BT_ACTOR_TELEPORT() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_TELEPORT ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_TELEPORTT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_ACTOR_UPDATET *AsOVERLORD_RTS_S2C_ACK_BT_ACTOR_UPDATE() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_UPDATE ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_ACTOR_UPDATET *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_ACTOR_UPDATET *AsOVERLORD_RTS_S2C_ACK_BT_ACTOR_UPDATE() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_UPDATE ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_UPDATET *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_ATTACK_NORMALT *AsOVERLORD_RTS_S2C_ACK_BT_ATTACK_NORMAL() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ATTACK_NORMAL ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_ATTACK_NORMALT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_ATTACK_NORMALT *AsOVERLORD_RTS_S2C_ACK_BT_ATTACK_NORMAL() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ATTACK_NORMAL ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ATTACK_NORMALT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_ATTACK_NOWT *AsOVERLORD_RTS_S2C_ACK_BT_ATTACK_NOW() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ATTACK_NOW ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_ATTACK_NOWT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_ATTACK_NOWT *AsOVERLORD_RTS_S2C_ACK_BT_ATTACK_NOW() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ATTACK_NOW ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ATTACK_NOWT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_CHANGE_CREWT *AsOVERLORD_RTS_S2C_ACK_BT_CHANGE_CREW() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_CHANGE_CREW ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_CHANGE_CREWT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_CHANGE_CREWT *AsOVERLORD_RTS_S2C_ACK_BT_CHANGE_CREW() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_CHANGE_CREW ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_CHANGE_CREWT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_CHANGE_SPIRITT *AsOVERLORD_RTS_S2C_ACK_BT_CHANGE_SPIRIT() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_CHANGE_SPIRIT ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_CHANGE_SPIRITT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_CHANGE_SPIRITT *AsOVERLORD_RTS_S2C_ACK_BT_CHANGE_SPIRIT() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_CHANGE_SPIRIT ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_CHANGE_SPIRITT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_DICE_COUNTT *AsOVERLORD_RTS_S2C_ACK_BT_DICE_COUNT() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_COUNT ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_DICE_COUNTT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_DICE_COUNTT *AsOVERLORD_RTS_S2C_ACK_BT_DICE_COUNT() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_COUNT ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_DICE_COUNTT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_DICE_NUMT *AsOVERLORD_RTS_S2C_ACK_BT_DICE_NUM() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_NUM ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_DICE_NUMT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_DICE_NUMT *AsOVERLORD_RTS_S2C_ACK_BT_DICE_NUM() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_NUM ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_DICE_NUMT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_DICE_OPENT *AsOVERLORD_RTS_S2C_ACK_BT_DICE_OPEN() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_OPEN ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_DICE_OPENT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_DICE_OPENT *AsOVERLORD_RTS_S2C_ACK_BT_DICE_OPEN() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_OPEN ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_DICE_OPENT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_DICE_RESULTT *AsOVERLORD_RTS_S2C_ACK_BT_DICE_RESULT() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_RESULT ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_DICE_RESULTT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_DICE_RESULTT *AsOVERLORD_RTS_S2C_ACK_BT_DICE_RESULT() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_RESULT ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_DICE_RESULTT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_DOOR_EVENTT *AsOVERLORD_RTS_S2C_ACK_BT_DOOR_EVENT() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DOOR_EVENT ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_DOOR_EVENTT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_DOOR_EVENTT *AsOVERLORD_RTS_S2C_ACK_BT_DOOR_EVENT() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DOOR_EVENT ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_DOOR_EVENTT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_DROP_CREWT *AsOVERLORD_RTS_S2C_ACK_BT_DROP_CREW() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DROP_CREW ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_DROP_CREWT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_DROP_CREWT *AsOVERLORD_RTS_S2C_ACK_BT_DROP_CREW() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DROP_CREW ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_DROP_CREWT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_NEW_PLAYERT *AsOVERLORD_RTS_S2C_ACK_BT_NEW_PLAYER() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_NEW_PLAYER ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_NEW_PLAYERT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_NEW_PLAYERT *AsOVERLORD_RTS_S2C_ACK_BT_NEW_PLAYER() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_NEW_PLAYER ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_NEW_PLAYERT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_SKILL_ACTIVATEDT *AsOVERLORD_RTS_S2C_ACK_BT_SKILL_ACTIVATED() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_ACTIVATED ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_SKILL_ACTIVATEDT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_SKILL_ACTIVATEDT *AsOVERLORD_RTS_S2C_ACK_BT_SKILL_ACTIVATED() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_ACTIVATED ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SKILL_ACTIVATEDT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_SKILL_BLOCKEDT *AsOVERLORD_RTS_S2C_ACK_BT_SKILL_BLOCKED() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_BLOCKED ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_SKILL_BLOCKEDT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_SKILL_BLOCKEDT *AsOVERLORD_RTS_S2C_ACK_BT_SKILL_BLOCKED() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_BLOCKED ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SKILL_BLOCKEDT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_SKILL_CASTEDT *AsOVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_SKILL_CASTEDT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_SKILL_CASTEDT *AsOVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SKILL_CASTEDT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_SKILL_CASTED_INTERVALT *AsOVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED_INTERVAL() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED_INTERVAL ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_SKILL_CASTED_INTERVALT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_SKILL_CASTED_INTERVALT *AsOVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED_INTERVAL() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED_INTERVAL ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SKILL_CASTED_INTERVALT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_SYNC_ACTOR_SCORET *AsOVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_SCORE() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_SCORE ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_SYNC_ACTOR_SCORET *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_SYNC_ACTOR_SCORET *AsOVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_SCORE() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_SCORE ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SYNC_ACTOR_SCORET *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_SYNC_ACTOR_UPDATET *AsOVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_UPDATE() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_UPDATE ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_SYNC_ACTOR_UPDATET *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_SYNC_ACTOR_UPDATET *AsOVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_UPDATE() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_UPDATE ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SYNC_ACTOR_UPDATET *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_SYNC_PLAYER_SCORET *AsOVERLORD_RTS_S2C_ACK_BT_SYNC_PLAYER_SCORE() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_PLAYER_SCORE ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_SYNC_PLAYER_SCORET *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_SYNC_PLAYER_SCORET *AsOVERLORD_RTS_S2C_ACK_BT_SYNC_PLAYER_SCORE() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_PLAYER_SCORE ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SYNC_PLAYER_SCORET *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_SYNC_SKILL_UPDATET *AsOVERLORD_RTS_S2C_ACK_BT_SYNC_SKILL_UPDATE() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_SKILL_UPDATE ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_SYNC_SKILL_UPDATET *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_SYNC_SKILL_UPDATET *AsOVERLORD_RTS_S2C_ACK_BT_SYNC_SKILL_UPDATE() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_SKILL_UPDATE ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SYNC_SKILL_UPDATET *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_SYNC_TIME_REMAINT *AsOVERLORD_RTS_S2C_ACK_BT_SYNC_TIME_REMAIN() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_TIME_REMAIN ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_SYNC_TIME_REMAINT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_SYNC_TIME_REMAINT *AsOVERLORD_RTS_S2C_ACK_BT_SYNC_TIME_REMAIN() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_TIME_REMAIN ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SYNC_TIME_REMAINT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_TEAM_POINT_UPDATET *AsOVERLORD_RTS_S2C_ACK_BT_TEAM_POINT_UPDATE() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_TEAM_POINT_UPDATE ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_TEAM_POINT_UPDATET *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_TEAM_POINT_UPDATET *AsOVERLORD_RTS_S2C_ACK_BT_TEAM_POINT_UPDATE() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_TEAM_POINT_UPDATE ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_TEAM_POINT_UPDATET *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_ZONE_EVENTT *AsOVERLORD_RTS_S2C_ACK_BT_ZONE_EVENT() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ZONE_EVENT ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_ZONE_EVENTT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_ZONE_EVENTT *AsOVERLORD_RTS_S2C_ACK_BT_ZONE_EVENT() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ZONE_EVENT ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ZONE_EVENTT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_BT_ZONE_STATET *AsOVERLORD_RTS_S2C_ACK_BT_ZONE_STATE() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ZONE_STATE ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_ZONE_STATET *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_ZONE_STATET *AsOVERLORD_RTS_S2C_ACK_BT_ZONE_STATE() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ZONE_STATE ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ZONE_STATET *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_CINEMATIC_DONET *AsOVERLORD_RTS_S2C_ACK_CINEMATIC_DONE() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_CINEMATIC_DONE ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_CINEMATIC_DONET *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_CINEMATIC_DONET *AsOVERLORD_RTS_S2C_ACK_CINEMATIC_DONE() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_CINEMATIC_DONE ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_CINEMATIC_DONET *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_COMMON_ERRORT *AsOVERLORD_RTS_S2C_ACK_COMMON_ERROR() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_COMMON_ERROR ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_COMMON_ERRORT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_COMMON_ERRORT *AsOVERLORD_RTS_S2C_ACK_COMMON_ERROR() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_COMMON_ERROR ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_COMMON_ERRORT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_COST_UPDATE_AVATART *AsOVERLORD_RTS_S2C_ACK_COST_UPDATE_AVATAR() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_COST_UPDATE_AVATAR ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_COST_UPDATE_AVATART *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_COST_UPDATE_AVATART *AsOVERLORD_RTS_S2C_ACK_COST_UPDATE_AVATAR() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_COST_UPDATE_AVATAR ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_COST_UPDATE_AVATART *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_CS_DECK_SELECTT *AsOVERLORD_RTS_S2C_ACK_CS_DECK_SELECT() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_SELECT ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_CS_DECK_SELECTT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_CS_DECK_SELECTT *AsOVERLORD_RTS_S2C_ACK_CS_DECK_SELECT() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_SELECT ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_CS_DECK_SELECTT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_CS_DECK_SELECT_READYT *AsOVERLORD_RTS_S2C_ACK_CS_DECK_SELECT_READY() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_SELECT_READY ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_CS_DECK_SELECT_READYT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_CS_DECK_SELECT_READYT *AsOVERLORD_RTS_S2C_ACK_CS_DECK_SELECT_READY() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_SELECT_READY ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_CS_DECK_SELECT_READYT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_CS_DECK_TIME_REMAINT *AsOVERLORD_RTS_S2C_ACK_CS_DECK_TIME_REMAIN() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_TIME_REMAIN ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_CS_DECK_TIME_REMAINT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_CS_DECK_TIME_REMAINT *AsOVERLORD_RTS_S2C_ACK_CS_DECK_TIME_REMAIN() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_TIME_REMAIN ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_CS_DECK_TIME_REMAINT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_CS_MATCHEDT *AsOVERLORD_RTS_S2C_ACK_CS_MATCHED() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_MATCHED ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_CS_MATCHEDT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_CS_MATCHEDT *AsOVERLORD_RTS_S2C_ACK_CS_MATCHED() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_MATCHED ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_CS_MATCHEDT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_DECK_CACHED_DONET *AsOVERLORD_RTS_S2C_ACK_DECK_CACHED_DONE() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_CACHED_DONE ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_DECK_CACHED_DONET *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_DECK_CACHED_DONET *AsOVERLORD_RTS_S2C_ACK_DECK_CACHED_DONE() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_CACHED_DONE ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_DECK_CACHED_DONET *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_DECK_SCENE_LOADEDT *AsOVERLORD_RTS_S2C_ACK_DECK_SCENE_LOADED() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SCENE_LOADED ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_DECK_SCENE_LOADEDT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_DECK_SCENE_LOADEDT *AsOVERLORD_RTS_S2C_ACK_DECK_SCENE_LOADED() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SCENE_LOADED ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_DECK_SCENE_LOADEDT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_DECK_SELECTT *AsOVERLORD_RTS_S2C_ACK_DECK_SELECT() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SELECT ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_DECK_SELECTT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_DECK_SELECTT *AsOVERLORD_RTS_S2C_ACK_DECK_SELECT() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SELECT ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_DECK_SELECTT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_DECK_SELECT_READYT *AsOVERLORD_RTS_S2C_ACK_DECK_SELECT_READY() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SELECT_READY ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_DECK_SELECT_READYT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_DECK_SELECT_READYT *AsOVERLORD_RTS_S2C_ACK_DECK_SELECT_READY() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SELECT_READY ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_DECK_SELECT_READYT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_DISCONNECTEDT *AsOVERLORD_RTS_S2C_ACK_DISCONNECTED() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_DISCONNECTED ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_DISCONNECTEDT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_DISCONNECTEDT *AsOVERLORD_RTS_S2C_ACK_DISCONNECTED() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_DISCONNECTED ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_DISCONNECTEDT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_MATCHEDT *AsOVERLORD_RTS_S2C_ACK_MATCHED() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_MATCHED ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_MATCHEDT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_MATCHEDT *AsOVERLORD_RTS_S2C_ACK_MATCHED() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_MATCHED ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_MATCHEDT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_MATCH_ROUNDT *AsOVERLORD_RTS_S2C_ACK_MATCH_ROUND() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_MATCH_ROUND ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_MATCH_ROUNDT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_MATCH_ROUNDT *AsOVERLORD_RTS_S2C_ACK_MATCH_ROUND() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_MATCH_ROUND ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_MATCH_ROUNDT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_PARTY_GOT *AsOVERLORD_RTS_S2C_ACK_PARTY_GO() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_GO ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_PARTY_GOT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_PARTY_GOT *AsOVERLORD_RTS_S2C_ACK_PARTY_GO() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_GO ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PARTY_GOT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_PARTY_LEADER_SLOTT *AsOVERLORD_RTS_S2C_ACK_PARTY_LEADER_SLOT() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_LEADER_SLOT ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_PARTY_LEADER_SLOTT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_PARTY_LEADER_SLOTT *AsOVERLORD_RTS_S2C_ACK_PARTY_LEADER_SLOT() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_LEADER_SLOT ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PARTY_LEADER_SLOTT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_PARTY_PLAYERT *AsOVERLORD_RTS_S2C_ACK_PARTY_PLAYER() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_PLAYER ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_PARTY_PLAYERT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_PARTY_PLAYERT *AsOVERLORD_RTS_S2C_ACK_PARTY_PLAYER() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_PLAYER ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PARTY_PLAYERT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_PARTY_PLAYER_EXITT *AsOVERLORD_RTS_S2C_ACK_PARTY_PLAYER_EXIT() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_PLAYER_EXIT ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_PARTY_PLAYER_EXITT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_PARTY_PLAYER_EXITT *AsOVERLORD_RTS_S2C_ACK_PARTY_PLAYER_EXIT() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_PLAYER_EXIT ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PARTY_PLAYER_EXITT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_PARTY_UPDATE_PUBLICT *AsOVERLORD_RTS_S2C_ACK_PARTY_UPDATE_PUBLIC() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_UPDATE_PUBLIC ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_PARTY_UPDATE_PUBLICT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_PARTY_UPDATE_PUBLICT *AsOVERLORD_RTS_S2C_ACK_PARTY_UPDATE_PUBLIC() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_UPDATE_PUBLIC ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PARTY_UPDATE_PUBLICT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_PLAY_COUNTT *AsOVERLORD_RTS_S2C_ACK_PLAY_COUNT() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_COUNT ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_PLAY_COUNTT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_PLAY_COUNTT *AsOVERLORD_RTS_S2C_ACK_PLAY_COUNT() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_COUNT ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PLAY_COUNTT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_PLAY_READYT *AsOVERLORD_RTS_S2C_ACK_PLAY_READY() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_READY ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_PLAY_READYT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_PLAY_READYT *AsOVERLORD_RTS_S2C_ACK_PLAY_READY() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_READY ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PLAY_READYT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_PLAY_SEND_RESULTT *AsOVERLORD_RTS_S2C_ACK_PLAY_SEND_RESULT() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_SEND_RESULT ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_PLAY_SEND_RESULTT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_PLAY_SEND_RESULTT *AsOVERLORD_RTS_S2C_ACK_PLAY_SEND_RESULT() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_SEND_RESULT ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PLAY_SEND_RESULTT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_PLAY_STARTT *AsOVERLORD_RTS_S2C_ACK_PLAY_START() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_START ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_PLAY_STARTT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_PLAY_STARTT *AsOVERLORD_RTS_S2C_ACK_PLAY_START() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_START ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PLAY_STARTT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_PLAY_TIMEOUTT *AsOVERLORD_RTS_S2C_ACK_PLAY_TIMEOUT() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_TIMEOUT ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_PLAY_TIMEOUTT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_PLAY_TIMEOUTT *AsOVERLORD_RTS_S2C_ACK_PLAY_TIMEOUT() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_TIMEOUT ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PLAY_TIMEOUTT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::ACK_STEP_GOT *AsOVERLORD_RTS_S2C_ACK_STEP_GO() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_STEP_GO ?
      reinterpret_cast<OVERLORD::RTS::S2C::ACK_STEP_GOT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_STEP_GOT *AsOVERLORD_RTS_S2C_ACK_STEP_GO() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_ACK_STEP_GO ?
      reinterpret_cast<const OVERLORD::RTS::S2C::ACK_STEP_GOT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::CHAT_CHANNEL_ENTERT *AsOVERLORD_RTS_S2C_CHAT_CHANNEL_ENTER() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_CHAT_CHANNEL_ENTER ?
      reinterpret_cast<OVERLORD::RTS::S2C::CHAT_CHANNEL_ENTERT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::CHAT_CHANNEL_ENTERT *AsOVERLORD_RTS_S2C_CHAT_CHANNEL_ENTER() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_CHAT_CHANNEL_ENTER ?
      reinterpret_cast<const OVERLORD::RTS::S2C::CHAT_CHANNEL_ENTERT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::CHAT_CHANNEL_EXITT *AsOVERLORD_RTS_S2C_CHAT_CHANNEL_EXIT() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_CHAT_CHANNEL_EXIT ?
      reinterpret_cast<OVERLORD::RTS::S2C::CHAT_CHANNEL_EXITT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::CHAT_CHANNEL_EXITT *AsOVERLORD_RTS_S2C_CHAT_CHANNEL_EXIT() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_CHAT_CHANNEL_EXIT ?
      reinterpret_cast<const OVERLORD::RTS::S2C::CHAT_CHANNEL_EXITT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::CHAT_MESSAGET *AsOVERLORD_RTS_S2C_CHAT_MESSAGE() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_CHAT_MESSAGE ?
      reinterpret_cast<OVERLORD::RTS::S2C::CHAT_MESSAGET *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::CHAT_MESSAGET *AsOVERLORD_RTS_S2C_CHAT_MESSAGE() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_CHAT_MESSAGE ?
      reinterpret_cast<const OVERLORD::RTS::S2C::CHAT_MESSAGET *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::CHAT_SUBSCRIBEDT *AsOVERLORD_RTS_S2C_CHAT_SUBSCRIBED() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_CHAT_SUBSCRIBED ?
      reinterpret_cast<OVERLORD::RTS::S2C::CHAT_SUBSCRIBEDT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::CHAT_SUBSCRIBEDT *AsOVERLORD_RTS_S2C_CHAT_SUBSCRIBED() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_CHAT_SUBSCRIBED ?
      reinterpret_cast<const OVERLORD::RTS::S2C::CHAT_SUBSCRIBEDT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::CHAT_UNSUBSCRIBEDT *AsOVERLORD_RTS_S2C_CHAT_UNSUBSCRIBED() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_CHAT_UNSUBSCRIBED ?
      reinterpret_cast<OVERLORD::RTS::S2C::CHAT_UNSUBSCRIBEDT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::CHAT_UNSUBSCRIBEDT *AsOVERLORD_RTS_S2C_CHAT_UNSUBSCRIBED() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_CHAT_UNSUBSCRIBED ?
      reinterpret_cast<const OVERLORD::RTS::S2C::CHAT_UNSUBSCRIBEDT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::REQ_CINEMATIC_PLAYT *AsOVERLORD_RTS_S2C_REQ_CINEMATIC_PLAY() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_REQ_CINEMATIC_PLAY ?
      reinterpret_cast<OVERLORD::RTS::S2C::REQ_CINEMATIC_PLAYT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::REQ_CINEMATIC_PLAYT *AsOVERLORD_RTS_S2C_REQ_CINEMATIC_PLAY() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_REQ_CINEMATIC_PLAY ?
      reinterpret_cast<const OVERLORD::RTS::S2C::REQ_CINEMATIC_PLAYT *>(value) : nullptr;
  }
  OVERLORD::RTS::S2C::REQ_STEP_READYT *AsOVERLORD_RTS_S2C_REQ_STEP_READY() {
    return type == UNION_RTS_OVERLORD_RTS_S2C_REQ_STEP_READY ?
      reinterpret_cast<OVERLORD::RTS::S2C::REQ_STEP_READYT *>(value) : nullptr;
  }
  const OVERLORD::RTS::S2C::REQ_STEP_READYT *AsOVERLORD_RTS_S2C_REQ_STEP_READY() const {
    return type == UNION_RTS_OVERLORD_RTS_S2C_REQ_STEP_READY ?
      reinterpret_cast<const OVERLORD::RTS::S2C::REQ_STEP_READYT *>(value) : nullptr;
  }
};

bool VerifyUNION_RTS(flatbuffers::Verifier &verifier, const void *obj, UNION_RTS type);
bool VerifyUNION_RTSVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct CMD_RTST : public flatbuffers::NativeTable {
  typedef CMD_RTS TableType;
  UNION_RTSUnion api;
  CMD_RTST() {
  }
};

struct CMD_RTS FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CMD_RTST NativeTableType;
  enum {
    VT_API_TYPE = 4,
    VT_API = 6
  };
  UNION_RTS api_type() const {
    return static_cast<UNION_RTS>(GetField<uint8_t>(VT_API_TYPE, 0));
  }
  const void *api() const {
    return GetPointer<const void *>(VT_API);
  }
  template<typename T> const T *api_as() const;
  const OVERLORD::RTS::C2S::ACK_CINEMATIC_DONE *api_as_OVERLORD_RTS_C2S_ACK_CINEMATIC_DONE() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_ACK_CINEMATIC_DONE ? static_cast<const OVERLORD::RTS::C2S::ACK_CINEMATIC_DONE *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::ACK_STEP_AND_GO *api_as_OVERLORD_RTS_C2S_ACK_STEP_AND_GO() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_ACK_STEP_AND_GO ? static_cast<const OVERLORD::RTS::C2S::ACK_STEP_AND_GO *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::CHAT_CHANNEL_MOVE *api_as_OVERLORD_RTS_C2S_CHAT_CHANNEL_MOVE() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_CHAT_CHANNEL_MOVE ? static_cast<const OVERLORD::RTS::C2S::CHAT_CHANNEL_MOVE *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::CHAT_MESSAGE *api_as_OVERLORD_RTS_C2S_CHAT_MESSAGE() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_CHAT_MESSAGE ? static_cast<const OVERLORD::RTS::C2S::CHAT_MESSAGE *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::CHAT_SUBSCRIBE *api_as_OVERLORD_RTS_C2S_CHAT_SUBSCRIBE() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_CHAT_SUBSCRIBE ? static_cast<const OVERLORD::RTS::C2S::CHAT_SUBSCRIBE *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_AUTH *api_as_OVERLORD_RTS_C2S_REQ_AUTH() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_AUTH ? static_cast<const OVERLORD::RTS::C2S::REQ_AUTH *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_ACTOR_CREATE *api_as_OVERLORD_RTS_C2S_REQ_BT_ACTOR_CREATE() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_CREATE ? static_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_CREATE *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_ACTOR_FORMATION *api_as_OVERLORD_RTS_C2S_REQ_BT_ACTOR_FORMATION() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_FORMATION ? static_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_FORMATION *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_ACTOR_MOVE *api_as_OVERLORD_RTS_C2S_REQ_BT_ACTOR_MOVE() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_MOVE ? static_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_MOVE *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_ACTOR_SCORE *api_as_OVERLORD_RTS_C2S_REQ_BT_ACTOR_SCORE() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_SCORE ? static_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_SCORE *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_ACTOR_SPAWN *api_as_OVERLORD_RTS_C2S_REQ_BT_ACTOR_SPAWN() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_SPAWN ? static_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_SPAWN *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_ACTOR_TELEPORT *api_as_OVERLORD_RTS_C2S_REQ_BT_ACTOR_TELEPORT() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_TELEPORT ? static_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_TELEPORT *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_ATTACK_NOW *api_as_OVERLORD_RTS_C2S_REQ_BT_ATTACK_NOW() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ATTACK_NOW ? static_cast<const OVERLORD::RTS::C2S::REQ_BT_ATTACK_NOW *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_CHANGE_CREW *api_as_OVERLORD_RTS_C2S_REQ_BT_CHANGE_CREW() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_CHANGE_CREW ? static_cast<const OVERLORD::RTS::C2S::REQ_BT_CHANGE_CREW *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_CHANGE_SPIRIT *api_as_OVERLORD_RTS_C2S_REQ_BT_CHANGE_SPIRIT() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_CHANGE_SPIRIT ? static_cast<const OVERLORD::RTS::C2S::REQ_BT_CHANGE_SPIRIT *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_DICE *api_as_OVERLORD_RTS_C2S_REQ_BT_DICE() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_DICE ? static_cast<const OVERLORD::RTS::C2S::REQ_BT_DICE *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_DROP_CREW *api_as_OVERLORD_RTS_C2S_REQ_BT_DROP_CREW() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_DROP_CREW ? static_cast<const OVERLORD::RTS::C2S::REQ_BT_DROP_CREW *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_ENTER *api_as_OVERLORD_RTS_C2S_REQ_BT_ENTER() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ENTER ? static_cast<const OVERLORD::RTS::C2S::REQ_BT_ENTER *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_EXIT *api_as_OVERLORD_RTS_C2S_REQ_BT_EXIT() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_EXIT ? static_cast<const OVERLORD::RTS::C2S::REQ_BT_EXIT *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_PLAYER_SCORE *api_as_OVERLORD_RTS_C2S_REQ_BT_PLAYER_SCORE() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_PLAYER_SCORE ? static_cast<const OVERLORD::RTS::C2S::REQ_BT_PLAYER_SCORE *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_BT_SKILL_CAST *api_as_OVERLORD_RTS_C2S_REQ_BT_SKILL_CAST() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_SKILL_CAST ? static_cast<const OVERLORD::RTS::C2S::REQ_BT_SKILL_CAST *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_CS_DECK_SELECT *api_as_OVERLORD_RTS_C2S_REQ_CS_DECK_SELECT() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_DECK_SELECT ? static_cast<const OVERLORD::RTS::C2S::REQ_CS_DECK_SELECT *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_CS_DECK_SELECT_READY *api_as_OVERLORD_RTS_C2S_REQ_CS_DECK_SELECT_READY() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_DECK_SELECT_READY ? static_cast<const OVERLORD::RTS::C2S::REQ_CS_DECK_SELECT_READY *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_CS_PARTY_UI_READY *api_as_OVERLORD_RTS_C2S_REQ_CS_PARTY_UI_READY() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_PARTY_UI_READY ? static_cast<const OVERLORD::RTS::C2S::REQ_CS_PARTY_UI_READY *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_DECK_SELECT *api_as_OVERLORD_RTS_C2S_REQ_DECK_SELECT() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_DECK_SELECT ? static_cast<const OVERLORD::RTS::C2S::REQ_DECK_SELECT *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_DECK_SELECT_READY *api_as_OVERLORD_RTS_C2S_REQ_DECK_SELECT_READY() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_DECK_SELECT_READY ? static_cast<const OVERLORD::RTS::C2S::REQ_DECK_SELECT_READY *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_MATCH *api_as_OVERLORD_RTS_C2S_REQ_MATCH() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH ? static_cast<const OVERLORD::RTS::C2S::REQ_MATCH *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_MATCH_CANCEL *api_as_OVERLORD_RTS_C2S_REQ_MATCH_CANCEL() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH_CANCEL ? static_cast<const OVERLORD::RTS::C2S::REQ_MATCH_CANCEL *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_MATCH_JOIN *api_as_OVERLORD_RTS_C2S_REQ_MATCH_JOIN() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH_JOIN ? static_cast<const OVERLORD::RTS::C2S::REQ_MATCH_JOIN *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_PARTY_GO *api_as_OVERLORD_RTS_C2S_REQ_PARTY_GO() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_GO ? static_cast<const OVERLORD::RTS::C2S::REQ_PARTY_GO *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_PARTY_UI_READY *api_as_OVERLORD_RTS_C2S_REQ_PARTY_UI_READY() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_UI_READY ? static_cast<const OVERLORD::RTS::C2S::REQ_PARTY_UI_READY *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_PARTY_UPDATE_PUBLIC *api_as_OVERLORD_RTS_C2S_REQ_PARTY_UPDATE_PUBLIC() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_UPDATE_PUBLIC ? static_cast<const OVERLORD::RTS::C2S::REQ_PARTY_UPDATE_PUBLIC *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_PING *api_as_OVERLORD_RTS_C2S_REQ_PING() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_PING ? static_cast<const OVERLORD::RTS::C2S::REQ_PING *>(api()) : nullptr;
  }
  const OVERLORD::RTS::C2S::REQ_PLAY_READY *api_as_OVERLORD_RTS_C2S_REQ_PLAY_READY() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_C2S_REQ_PLAY_READY ? static_cast<const OVERLORD::RTS::C2S::REQ_PLAY_READY *>(api()) : nullptr;
  }
  const OVERLORD::RTS::IC::IC_BT_ACTOR_MOVE *api_as_OVERLORD_RTS_IC_IC_BT_ACTOR_MOVE() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_IC_IC_BT_ACTOR_MOVE ? static_cast<const OVERLORD::RTS::IC::IC_BT_ACTOR_MOVE *>(api()) : nullptr;
  }
  const OVERLORD::RTS::IC::IC_BT_ACTOR_RESPAWN *api_as_OVERLORD_RTS_IC_IC_BT_ACTOR_RESPAWN() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_IC_IC_BT_ACTOR_RESPAWN ? static_cast<const OVERLORD::RTS::IC::IC_BT_ACTOR_RESPAWN *>(api()) : nullptr;
  }
  const OVERLORD::RTS::IC::IC_NPCHOST_STEP_ON *api_as_OVERLORD_RTS_IC_IC_NPCHOST_STEP_ON() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_IC_IC_NPCHOST_STEP_ON ? static_cast<const OVERLORD::RTS::IC::IC_NPCHOST_STEP_ON *>(api()) : nullptr;
  }
  const OVERLORD::RTS::IC::IC_SPAWN_NPC *api_as_OVERLORD_RTS_IC_IC_SPAWN_NPC() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_IC_IC_SPAWN_NPC ? static_cast<const OVERLORD::RTS::IC::IC_SPAWN_NPC *>(api()) : nullptr;
  }
  const OVERLORD::RTS::IC::NPC_HANDLER_JOIN *api_as_OVERLORD_RTS_IC_NPC_HANDLER_JOIN() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_IC_NPC_HANDLER_JOIN ? static_cast<const OVERLORD::RTS::IC::NPC_HANDLER_JOIN *>(api()) : nullptr;
  }
  const OVERLORD::RTS::IC::ROOM_DISPOSE *api_as_OVERLORD_RTS_IC_ROOM_DISPOSE() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_IC_ROOM_DISPOSE ? static_cast<const OVERLORD::RTS::IC::ROOM_DISPOSE *>(api()) : nullptr;
  }
  const OVERLORD::RTS::IC::ROOM_JOIN *api_as_OVERLORD_RTS_IC_ROOM_JOIN() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_IC_ROOM_JOIN ? static_cast<const OVERLORD::RTS::IC::ROOM_JOIN *>(api()) : nullptr;
  }
  const OVERLORD::RTS::IC::ROOM_PLAYER *api_as_OVERLORD_RTS_IC_ROOM_PLAYER() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_IC_ROOM_PLAYER ? static_cast<const OVERLORD::RTS::IC::ROOM_PLAYER *>(api()) : nullptr;
  }
  const OVERLORD::RTS::IC::ROOM_PLAYER_DISCONNECTED *api_as_OVERLORD_RTS_IC_ROOM_PLAYER_DISCONNECTED() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_IC_ROOM_PLAYER_DISCONNECTED ? static_cast<const OVERLORD::RTS::IC::ROOM_PLAYER_DISCONNECTED *>(api()) : nullptr;
  }
  const OVERLORD::RTS::IC::ROOM_REJOIN *api_as_OVERLORD_RTS_IC_ROOM_REJOIN() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_IC_ROOM_REJOIN ? static_cast<const OVERLORD::RTS::IC::ROOM_REJOIN *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_AUTH *api_as_OVERLORD_RTS_S2C_ACK_AUTH() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_AUTH ? static_cast<const OVERLORD::RTS::S2C::ACK_AUTH *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_ACTOR_CREATE *api_as_OVERLORD_RTS_S2C_ACK_BT_ACTOR_CREATE() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_CREATE ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_CREATE *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_ACTOR_DESPAWN *api_as_OVERLORD_RTS_S2C_ACK_BT_ACTOR_DESPAWN() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_DESPAWN ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_DESPAWN *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_ACTOR_DISAPPEAR *api_as_OVERLORD_RTS_S2C_ACK_BT_ACTOR_DISAPPEAR() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_DISAPPEAR ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_DISAPPEAR *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_ACTOR_FORMATION *api_as_OVERLORD_RTS_S2C_ACK_BT_ACTOR_FORMATION() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_FORMATION ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_FORMATION *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_ACTOR_MEDAL_UPDATE *api_as_OVERLORD_RTS_S2C_ACK_BT_ACTOR_MEDAL_UPDATE() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_MEDAL_UPDATE ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_MEDAL_UPDATE *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_ACTOR_RESPAWN *api_as_OVERLORD_RTS_S2C_ACK_BT_ACTOR_RESPAWN() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_RESPAWN ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_RESPAWN *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_ACTOR_SPAWN *api_as_OVERLORD_RTS_S2C_ACK_BT_ACTOR_SPAWN() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_SPAWN ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_SPAWN *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_ACTOR_TELEPORT *api_as_OVERLORD_RTS_S2C_ACK_BT_ACTOR_TELEPORT() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_TELEPORT ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_TELEPORT *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_ACTOR_UPDATE *api_as_OVERLORD_RTS_S2C_ACK_BT_ACTOR_UPDATE() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_UPDATE ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_UPDATE *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_ATTACK_NORMAL *api_as_OVERLORD_RTS_S2C_ACK_BT_ATTACK_NORMAL() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ATTACK_NORMAL ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_ATTACK_NORMAL *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_ATTACK_NOW *api_as_OVERLORD_RTS_S2C_ACK_BT_ATTACK_NOW() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ATTACK_NOW ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_ATTACK_NOW *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_CHANGE_CREW *api_as_OVERLORD_RTS_S2C_ACK_BT_CHANGE_CREW() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_CHANGE_CREW ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_CHANGE_CREW *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_CHANGE_SPIRIT *api_as_OVERLORD_RTS_S2C_ACK_BT_CHANGE_SPIRIT() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_CHANGE_SPIRIT ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_CHANGE_SPIRIT *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_DICE_COUNT *api_as_OVERLORD_RTS_S2C_ACK_BT_DICE_COUNT() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_COUNT ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_DICE_COUNT *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_DICE_NUM *api_as_OVERLORD_RTS_S2C_ACK_BT_DICE_NUM() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_NUM ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_DICE_NUM *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_DICE_OPEN *api_as_OVERLORD_RTS_S2C_ACK_BT_DICE_OPEN() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_OPEN ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_DICE_OPEN *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_DICE_RESULT *api_as_OVERLORD_RTS_S2C_ACK_BT_DICE_RESULT() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_RESULT ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_DICE_RESULT *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_DOOR_EVENT *api_as_OVERLORD_RTS_S2C_ACK_BT_DOOR_EVENT() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DOOR_EVENT ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_DOOR_EVENT *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_DROP_CREW *api_as_OVERLORD_RTS_S2C_ACK_BT_DROP_CREW() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DROP_CREW ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_DROP_CREW *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_NEW_PLAYER *api_as_OVERLORD_RTS_S2C_ACK_BT_NEW_PLAYER() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_NEW_PLAYER ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_NEW_PLAYER *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_SKILL_ACTIVATED *api_as_OVERLORD_RTS_S2C_ACK_BT_SKILL_ACTIVATED() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_ACTIVATED ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_SKILL_ACTIVATED *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_SKILL_BLOCKED *api_as_OVERLORD_RTS_S2C_ACK_BT_SKILL_BLOCKED() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_BLOCKED ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_SKILL_BLOCKED *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_SKILL_CASTED *api_as_OVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_SKILL_CASTED *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_SKILL_CASTED_INTERVAL *api_as_OVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED_INTERVAL() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED_INTERVAL ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_SKILL_CASTED_INTERVAL *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_SYNC_ACTOR_SCORE *api_as_OVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_SCORE() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_SCORE ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_SYNC_ACTOR_SCORE *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_SYNC_ACTOR_UPDATE *api_as_OVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_UPDATE() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_UPDATE ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_SYNC_ACTOR_UPDATE *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_SYNC_PLAYER_SCORE *api_as_OVERLORD_RTS_S2C_ACK_BT_SYNC_PLAYER_SCORE() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_PLAYER_SCORE ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_SYNC_PLAYER_SCORE *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_SYNC_SKILL_UPDATE *api_as_OVERLORD_RTS_S2C_ACK_BT_SYNC_SKILL_UPDATE() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_SKILL_UPDATE ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_SYNC_SKILL_UPDATE *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_SYNC_TIME_REMAIN *api_as_OVERLORD_RTS_S2C_ACK_BT_SYNC_TIME_REMAIN() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_TIME_REMAIN ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_SYNC_TIME_REMAIN *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_TEAM_POINT_UPDATE *api_as_OVERLORD_RTS_S2C_ACK_BT_TEAM_POINT_UPDATE() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_TEAM_POINT_UPDATE ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_TEAM_POINT_UPDATE *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_ZONE_EVENT *api_as_OVERLORD_RTS_S2C_ACK_BT_ZONE_EVENT() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ZONE_EVENT ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_ZONE_EVENT *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_BT_ZONE_STATE *api_as_OVERLORD_RTS_S2C_ACK_BT_ZONE_STATE() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ZONE_STATE ? static_cast<const OVERLORD::RTS::S2C::ACK_BT_ZONE_STATE *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_CINEMATIC_DONE *api_as_OVERLORD_RTS_S2C_ACK_CINEMATIC_DONE() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_CINEMATIC_DONE ? static_cast<const OVERLORD::RTS::S2C::ACK_CINEMATIC_DONE *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_COMMON_ERROR *api_as_OVERLORD_RTS_S2C_ACK_COMMON_ERROR() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_COMMON_ERROR ? static_cast<const OVERLORD::RTS::S2C::ACK_COMMON_ERROR *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_COST_UPDATE_AVATAR *api_as_OVERLORD_RTS_S2C_ACK_COST_UPDATE_AVATAR() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_COST_UPDATE_AVATAR ? static_cast<const OVERLORD::RTS::S2C::ACK_COST_UPDATE_AVATAR *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_CS_DECK_SELECT *api_as_OVERLORD_RTS_S2C_ACK_CS_DECK_SELECT() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_SELECT ? static_cast<const OVERLORD::RTS::S2C::ACK_CS_DECK_SELECT *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_CS_DECK_SELECT_READY *api_as_OVERLORD_RTS_S2C_ACK_CS_DECK_SELECT_READY() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_SELECT_READY ? static_cast<const OVERLORD::RTS::S2C::ACK_CS_DECK_SELECT_READY *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_CS_DECK_TIME_REMAIN *api_as_OVERLORD_RTS_S2C_ACK_CS_DECK_TIME_REMAIN() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_TIME_REMAIN ? static_cast<const OVERLORD::RTS::S2C::ACK_CS_DECK_TIME_REMAIN *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_CS_MATCHED *api_as_OVERLORD_RTS_S2C_ACK_CS_MATCHED() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_MATCHED ? static_cast<const OVERLORD::RTS::S2C::ACK_CS_MATCHED *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_DECK_CACHED_DONE *api_as_OVERLORD_RTS_S2C_ACK_DECK_CACHED_DONE() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_CACHED_DONE ? static_cast<const OVERLORD::RTS::S2C::ACK_DECK_CACHED_DONE *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_DECK_SCENE_LOADED *api_as_OVERLORD_RTS_S2C_ACK_DECK_SCENE_LOADED() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SCENE_LOADED ? static_cast<const OVERLORD::RTS::S2C::ACK_DECK_SCENE_LOADED *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_DECK_SELECT *api_as_OVERLORD_RTS_S2C_ACK_DECK_SELECT() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SELECT ? static_cast<const OVERLORD::RTS::S2C::ACK_DECK_SELECT *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_DECK_SELECT_READY *api_as_OVERLORD_RTS_S2C_ACK_DECK_SELECT_READY() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SELECT_READY ? static_cast<const OVERLORD::RTS::S2C::ACK_DECK_SELECT_READY *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_DISCONNECTED *api_as_OVERLORD_RTS_S2C_ACK_DISCONNECTED() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_DISCONNECTED ? static_cast<const OVERLORD::RTS::S2C::ACK_DISCONNECTED *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_MATCHED *api_as_OVERLORD_RTS_S2C_ACK_MATCHED() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_MATCHED ? static_cast<const OVERLORD::RTS::S2C::ACK_MATCHED *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_MATCH_ROUND *api_as_OVERLORD_RTS_S2C_ACK_MATCH_ROUND() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_MATCH_ROUND ? static_cast<const OVERLORD::RTS::S2C::ACK_MATCH_ROUND *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_PARTY_GO *api_as_OVERLORD_RTS_S2C_ACK_PARTY_GO() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_GO ? static_cast<const OVERLORD::RTS::S2C::ACK_PARTY_GO *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_PARTY_LEADER_SLOT *api_as_OVERLORD_RTS_S2C_ACK_PARTY_LEADER_SLOT() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_LEADER_SLOT ? static_cast<const OVERLORD::RTS::S2C::ACK_PARTY_LEADER_SLOT *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_PARTY_PLAYER *api_as_OVERLORD_RTS_S2C_ACK_PARTY_PLAYER() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_PLAYER ? static_cast<const OVERLORD::RTS::S2C::ACK_PARTY_PLAYER *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_PARTY_PLAYER_EXIT *api_as_OVERLORD_RTS_S2C_ACK_PARTY_PLAYER_EXIT() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_PLAYER_EXIT ? static_cast<const OVERLORD::RTS::S2C::ACK_PARTY_PLAYER_EXIT *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_PARTY_UPDATE_PUBLIC *api_as_OVERLORD_RTS_S2C_ACK_PARTY_UPDATE_PUBLIC() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_UPDATE_PUBLIC ? static_cast<const OVERLORD::RTS::S2C::ACK_PARTY_UPDATE_PUBLIC *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_PLAY_COUNT *api_as_OVERLORD_RTS_S2C_ACK_PLAY_COUNT() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_COUNT ? static_cast<const OVERLORD::RTS::S2C::ACK_PLAY_COUNT *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_PLAY_READY *api_as_OVERLORD_RTS_S2C_ACK_PLAY_READY() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_READY ? static_cast<const OVERLORD::RTS::S2C::ACK_PLAY_READY *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_PLAY_SEND_RESULT *api_as_OVERLORD_RTS_S2C_ACK_PLAY_SEND_RESULT() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_SEND_RESULT ? static_cast<const OVERLORD::RTS::S2C::ACK_PLAY_SEND_RESULT *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_PLAY_START *api_as_OVERLORD_RTS_S2C_ACK_PLAY_START() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_START ? static_cast<const OVERLORD::RTS::S2C::ACK_PLAY_START *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_PLAY_TIMEOUT *api_as_OVERLORD_RTS_S2C_ACK_PLAY_TIMEOUT() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_TIMEOUT ? static_cast<const OVERLORD::RTS::S2C::ACK_PLAY_TIMEOUT *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::ACK_STEP_GO *api_as_OVERLORD_RTS_S2C_ACK_STEP_GO() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_ACK_STEP_GO ? static_cast<const OVERLORD::RTS::S2C::ACK_STEP_GO *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::CHAT_CHANNEL_ENTER *api_as_OVERLORD_RTS_S2C_CHAT_CHANNEL_ENTER() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_CHAT_CHANNEL_ENTER ? static_cast<const OVERLORD::RTS::S2C::CHAT_CHANNEL_ENTER *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::CHAT_CHANNEL_EXIT *api_as_OVERLORD_RTS_S2C_CHAT_CHANNEL_EXIT() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_CHAT_CHANNEL_EXIT ? static_cast<const OVERLORD::RTS::S2C::CHAT_CHANNEL_EXIT *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::CHAT_MESSAGE *api_as_OVERLORD_RTS_S2C_CHAT_MESSAGE() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_CHAT_MESSAGE ? static_cast<const OVERLORD::RTS::S2C::CHAT_MESSAGE *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::CHAT_SUBSCRIBED *api_as_OVERLORD_RTS_S2C_CHAT_SUBSCRIBED() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_CHAT_SUBSCRIBED ? static_cast<const OVERLORD::RTS::S2C::CHAT_SUBSCRIBED *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::CHAT_UNSUBSCRIBED *api_as_OVERLORD_RTS_S2C_CHAT_UNSUBSCRIBED() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_CHAT_UNSUBSCRIBED ? static_cast<const OVERLORD::RTS::S2C::CHAT_UNSUBSCRIBED *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::REQ_CINEMATIC_PLAY *api_as_OVERLORD_RTS_S2C_REQ_CINEMATIC_PLAY() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_REQ_CINEMATIC_PLAY ? static_cast<const OVERLORD::RTS::S2C::REQ_CINEMATIC_PLAY *>(api()) : nullptr;
  }
  const OVERLORD::RTS::S2C::REQ_STEP_READY *api_as_OVERLORD_RTS_S2C_REQ_STEP_READY() const {
    return api_type() == UNION_RTS_OVERLORD_RTS_S2C_REQ_STEP_READY ? static_cast<const OVERLORD::RTS::S2C::REQ_STEP_READY *>(api()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_API_TYPE) &&
           VerifyOffset(verifier, VT_API) &&
           VerifyUNION_RTS(verifier, api(), api_type()) &&
           verifier.EndTable();
  }
  CMD_RTST *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CMD_RTST *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<CMD_RTS> Pack(flatbuffers::FlatBufferBuilder &_fbb, const CMD_RTST* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

template<> inline const OVERLORD::RTS::C2S::ACK_CINEMATIC_DONE *CMD_RTS::api_as<OVERLORD::RTS::C2S::ACK_CINEMATIC_DONE>() const {
  return api_as_OVERLORD_RTS_C2S_ACK_CINEMATIC_DONE();
}

template<> inline const OVERLORD::RTS::C2S::ACK_STEP_AND_GO *CMD_RTS::api_as<OVERLORD::RTS::C2S::ACK_STEP_AND_GO>() const {
  return api_as_OVERLORD_RTS_C2S_ACK_STEP_AND_GO();
}

template<> inline const OVERLORD::RTS::C2S::CHAT_CHANNEL_MOVE *CMD_RTS::api_as<OVERLORD::RTS::C2S::CHAT_CHANNEL_MOVE>() const {
  return api_as_OVERLORD_RTS_C2S_CHAT_CHANNEL_MOVE();
}

template<> inline const OVERLORD::RTS::C2S::CHAT_MESSAGE *CMD_RTS::api_as<OVERLORD::RTS::C2S::CHAT_MESSAGE>() const {
  return api_as_OVERLORD_RTS_C2S_CHAT_MESSAGE();
}

template<> inline const OVERLORD::RTS::C2S::CHAT_SUBSCRIBE *CMD_RTS::api_as<OVERLORD::RTS::C2S::CHAT_SUBSCRIBE>() const {
  return api_as_OVERLORD_RTS_C2S_CHAT_SUBSCRIBE();
}

template<> inline const OVERLORD::RTS::C2S::REQ_AUTH *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_AUTH>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_AUTH();
}

template<> inline const OVERLORD::RTS::C2S::REQ_BT_ACTOR_CREATE *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_BT_ACTOR_CREATE>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_BT_ACTOR_CREATE();
}

template<> inline const OVERLORD::RTS::C2S::REQ_BT_ACTOR_FORMATION *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_BT_ACTOR_FORMATION>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_BT_ACTOR_FORMATION();
}

template<> inline const OVERLORD::RTS::C2S::REQ_BT_ACTOR_MOVE *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_BT_ACTOR_MOVE>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_BT_ACTOR_MOVE();
}

template<> inline const OVERLORD::RTS::C2S::REQ_BT_ACTOR_SCORE *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_BT_ACTOR_SCORE>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_BT_ACTOR_SCORE();
}

template<> inline const OVERLORD::RTS::C2S::REQ_BT_ACTOR_SPAWN *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_BT_ACTOR_SPAWN>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_BT_ACTOR_SPAWN();
}

template<> inline const OVERLORD::RTS::C2S::REQ_BT_ACTOR_TELEPORT *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_BT_ACTOR_TELEPORT>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_BT_ACTOR_TELEPORT();
}

template<> inline const OVERLORD::RTS::C2S::REQ_BT_ATTACK_NOW *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_BT_ATTACK_NOW>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_BT_ATTACK_NOW();
}

template<> inline const OVERLORD::RTS::C2S::REQ_BT_CHANGE_CREW *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_BT_CHANGE_CREW>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_BT_CHANGE_CREW();
}

template<> inline const OVERLORD::RTS::C2S::REQ_BT_CHANGE_SPIRIT *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_BT_CHANGE_SPIRIT>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_BT_CHANGE_SPIRIT();
}

template<> inline const OVERLORD::RTS::C2S::REQ_BT_DICE *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_BT_DICE>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_BT_DICE();
}

template<> inline const OVERLORD::RTS::C2S::REQ_BT_DROP_CREW *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_BT_DROP_CREW>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_BT_DROP_CREW();
}

template<> inline const OVERLORD::RTS::C2S::REQ_BT_ENTER *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_BT_ENTER>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_BT_ENTER();
}

template<> inline const OVERLORD::RTS::C2S::REQ_BT_EXIT *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_BT_EXIT>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_BT_EXIT();
}

template<> inline const OVERLORD::RTS::C2S::REQ_BT_PLAYER_SCORE *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_BT_PLAYER_SCORE>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_BT_PLAYER_SCORE();
}

template<> inline const OVERLORD::RTS::C2S::REQ_BT_SKILL_CAST *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_BT_SKILL_CAST>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_BT_SKILL_CAST();
}

template<> inline const OVERLORD::RTS::C2S::REQ_CS_DECK_SELECT *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_CS_DECK_SELECT>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_CS_DECK_SELECT();
}

template<> inline const OVERLORD::RTS::C2S::REQ_CS_DECK_SELECT_READY *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_CS_DECK_SELECT_READY>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_CS_DECK_SELECT_READY();
}

template<> inline const OVERLORD::RTS::C2S::REQ_CS_PARTY_UI_READY *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_CS_PARTY_UI_READY>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_CS_PARTY_UI_READY();
}

template<> inline const OVERLORD::RTS::C2S::REQ_DECK_SELECT *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_DECK_SELECT>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_DECK_SELECT();
}

template<> inline const OVERLORD::RTS::C2S::REQ_DECK_SELECT_READY *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_DECK_SELECT_READY>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_DECK_SELECT_READY();
}

template<> inline const OVERLORD::RTS::C2S::REQ_MATCH *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_MATCH>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_MATCH();
}

template<> inline const OVERLORD::RTS::C2S::REQ_MATCH_CANCEL *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_MATCH_CANCEL>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_MATCH_CANCEL();
}

template<> inline const OVERLORD::RTS::C2S::REQ_MATCH_JOIN *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_MATCH_JOIN>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_MATCH_JOIN();
}

template<> inline const OVERLORD::RTS::C2S::REQ_PARTY_GO *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_PARTY_GO>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_PARTY_GO();
}

template<> inline const OVERLORD::RTS::C2S::REQ_PARTY_UI_READY *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_PARTY_UI_READY>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_PARTY_UI_READY();
}

template<> inline const OVERLORD::RTS::C2S::REQ_PARTY_UPDATE_PUBLIC *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_PARTY_UPDATE_PUBLIC>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_PARTY_UPDATE_PUBLIC();
}

template<> inline const OVERLORD::RTS::C2S::REQ_PING *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_PING>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_PING();
}

template<> inline const OVERLORD::RTS::C2S::REQ_PLAY_READY *CMD_RTS::api_as<OVERLORD::RTS::C2S::REQ_PLAY_READY>() const {
  return api_as_OVERLORD_RTS_C2S_REQ_PLAY_READY();
}

template<> inline const OVERLORD::RTS::IC::IC_BT_ACTOR_MOVE *CMD_RTS::api_as<OVERLORD::RTS::IC::IC_BT_ACTOR_MOVE>() const {
  return api_as_OVERLORD_RTS_IC_IC_BT_ACTOR_MOVE();
}

template<> inline const OVERLORD::RTS::IC::IC_BT_ACTOR_RESPAWN *CMD_RTS::api_as<OVERLORD::RTS::IC::IC_BT_ACTOR_RESPAWN>() const {
  return api_as_OVERLORD_RTS_IC_IC_BT_ACTOR_RESPAWN();
}

template<> inline const OVERLORD::RTS::IC::IC_NPCHOST_STEP_ON *CMD_RTS::api_as<OVERLORD::RTS::IC::IC_NPCHOST_STEP_ON>() const {
  return api_as_OVERLORD_RTS_IC_IC_NPCHOST_STEP_ON();
}

template<> inline const OVERLORD::RTS::IC::IC_SPAWN_NPC *CMD_RTS::api_as<OVERLORD::RTS::IC::IC_SPAWN_NPC>() const {
  return api_as_OVERLORD_RTS_IC_IC_SPAWN_NPC();
}

template<> inline const OVERLORD::RTS::IC::NPC_HANDLER_JOIN *CMD_RTS::api_as<OVERLORD::RTS::IC::NPC_HANDLER_JOIN>() const {
  return api_as_OVERLORD_RTS_IC_NPC_HANDLER_JOIN();
}

template<> inline const OVERLORD::RTS::IC::ROOM_DISPOSE *CMD_RTS::api_as<OVERLORD::RTS::IC::ROOM_DISPOSE>() const {
  return api_as_OVERLORD_RTS_IC_ROOM_DISPOSE();
}

template<> inline const OVERLORD::RTS::IC::ROOM_JOIN *CMD_RTS::api_as<OVERLORD::RTS::IC::ROOM_JOIN>() const {
  return api_as_OVERLORD_RTS_IC_ROOM_JOIN();
}

template<> inline const OVERLORD::RTS::IC::ROOM_PLAYER *CMD_RTS::api_as<OVERLORD::RTS::IC::ROOM_PLAYER>() const {
  return api_as_OVERLORD_RTS_IC_ROOM_PLAYER();
}

template<> inline const OVERLORD::RTS::IC::ROOM_PLAYER_DISCONNECTED *CMD_RTS::api_as<OVERLORD::RTS::IC::ROOM_PLAYER_DISCONNECTED>() const {
  return api_as_OVERLORD_RTS_IC_ROOM_PLAYER_DISCONNECTED();
}

template<> inline const OVERLORD::RTS::IC::ROOM_REJOIN *CMD_RTS::api_as<OVERLORD::RTS::IC::ROOM_REJOIN>() const {
  return api_as_OVERLORD_RTS_IC_ROOM_REJOIN();
}

template<> inline const OVERLORD::RTS::S2C::ACK_AUTH *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_AUTH>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_AUTH();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_ACTOR_CREATE *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_ACTOR_CREATE>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_ACTOR_CREATE();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_ACTOR_DESPAWN *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_ACTOR_DESPAWN>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_ACTOR_DESPAWN();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_ACTOR_DISAPPEAR *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_ACTOR_DISAPPEAR>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_ACTOR_DISAPPEAR();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_ACTOR_FORMATION *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_ACTOR_FORMATION>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_ACTOR_FORMATION();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_ACTOR_MEDAL_UPDATE *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_ACTOR_MEDAL_UPDATE>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_ACTOR_MEDAL_UPDATE();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_ACTOR_RESPAWN *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_ACTOR_RESPAWN>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_ACTOR_RESPAWN();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_ACTOR_SPAWN *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_ACTOR_SPAWN>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_ACTOR_SPAWN();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_ACTOR_TELEPORT *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_ACTOR_TELEPORT>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_ACTOR_TELEPORT();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_ACTOR_UPDATE *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_ACTOR_UPDATE>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_ACTOR_UPDATE();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_ATTACK_NORMAL *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_ATTACK_NORMAL>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_ATTACK_NORMAL();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_ATTACK_NOW *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_ATTACK_NOW>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_ATTACK_NOW();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_CHANGE_CREW *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_CHANGE_CREW>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_CHANGE_CREW();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_CHANGE_SPIRIT *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_CHANGE_SPIRIT>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_CHANGE_SPIRIT();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_DICE_COUNT *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_DICE_COUNT>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_DICE_COUNT();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_DICE_NUM *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_DICE_NUM>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_DICE_NUM();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_DICE_OPEN *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_DICE_OPEN>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_DICE_OPEN();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_DICE_RESULT *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_DICE_RESULT>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_DICE_RESULT();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_DOOR_EVENT *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_DOOR_EVENT>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_DOOR_EVENT();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_DROP_CREW *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_DROP_CREW>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_DROP_CREW();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_NEW_PLAYER *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_NEW_PLAYER>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_NEW_PLAYER();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_SKILL_ACTIVATED *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_SKILL_ACTIVATED>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_SKILL_ACTIVATED();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_SKILL_BLOCKED *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_SKILL_BLOCKED>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_SKILL_BLOCKED();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_SKILL_CASTED *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_SKILL_CASTED>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_SKILL_CASTED_INTERVAL *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_SKILL_CASTED_INTERVAL>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED_INTERVAL();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_SYNC_ACTOR_SCORE *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_SYNC_ACTOR_SCORE>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_SCORE();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_SYNC_ACTOR_UPDATE *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_SYNC_ACTOR_UPDATE>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_UPDATE();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_SYNC_PLAYER_SCORE *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_SYNC_PLAYER_SCORE>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_SYNC_PLAYER_SCORE();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_SYNC_SKILL_UPDATE *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_SYNC_SKILL_UPDATE>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_SYNC_SKILL_UPDATE();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_SYNC_TIME_REMAIN *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_SYNC_TIME_REMAIN>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_SYNC_TIME_REMAIN();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_TEAM_POINT_UPDATE *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_TEAM_POINT_UPDATE>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_TEAM_POINT_UPDATE();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_ZONE_EVENT *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_ZONE_EVENT>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_ZONE_EVENT();
}

template<> inline const OVERLORD::RTS::S2C::ACK_BT_ZONE_STATE *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_BT_ZONE_STATE>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_BT_ZONE_STATE();
}

template<> inline const OVERLORD::RTS::S2C::ACK_CINEMATIC_DONE *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_CINEMATIC_DONE>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_CINEMATIC_DONE();
}

template<> inline const OVERLORD::RTS::S2C::ACK_COMMON_ERROR *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_COMMON_ERROR>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_COMMON_ERROR();
}

template<> inline const OVERLORD::RTS::S2C::ACK_COST_UPDATE_AVATAR *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_COST_UPDATE_AVATAR>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_COST_UPDATE_AVATAR();
}

template<> inline const OVERLORD::RTS::S2C::ACK_CS_DECK_SELECT *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_CS_DECK_SELECT>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_CS_DECK_SELECT();
}

template<> inline const OVERLORD::RTS::S2C::ACK_CS_DECK_SELECT_READY *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_CS_DECK_SELECT_READY>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_CS_DECK_SELECT_READY();
}

template<> inline const OVERLORD::RTS::S2C::ACK_CS_DECK_TIME_REMAIN *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_CS_DECK_TIME_REMAIN>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_CS_DECK_TIME_REMAIN();
}

template<> inline const OVERLORD::RTS::S2C::ACK_CS_MATCHED *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_CS_MATCHED>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_CS_MATCHED();
}

template<> inline const OVERLORD::RTS::S2C::ACK_DECK_CACHED_DONE *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_DECK_CACHED_DONE>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_DECK_CACHED_DONE();
}

template<> inline const OVERLORD::RTS::S2C::ACK_DECK_SCENE_LOADED *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_DECK_SCENE_LOADED>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_DECK_SCENE_LOADED();
}

template<> inline const OVERLORD::RTS::S2C::ACK_DECK_SELECT *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_DECK_SELECT>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_DECK_SELECT();
}

template<> inline const OVERLORD::RTS::S2C::ACK_DECK_SELECT_READY *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_DECK_SELECT_READY>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_DECK_SELECT_READY();
}

template<> inline const OVERLORD::RTS::S2C::ACK_DISCONNECTED *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_DISCONNECTED>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_DISCONNECTED();
}

template<> inline const OVERLORD::RTS::S2C::ACK_MATCHED *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_MATCHED>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_MATCHED();
}

template<> inline const OVERLORD::RTS::S2C::ACK_MATCH_ROUND *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_MATCH_ROUND>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_MATCH_ROUND();
}

template<> inline const OVERLORD::RTS::S2C::ACK_PARTY_GO *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_PARTY_GO>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_PARTY_GO();
}

template<> inline const OVERLORD::RTS::S2C::ACK_PARTY_LEADER_SLOT *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_PARTY_LEADER_SLOT>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_PARTY_LEADER_SLOT();
}

template<> inline const OVERLORD::RTS::S2C::ACK_PARTY_PLAYER *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_PARTY_PLAYER>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_PARTY_PLAYER();
}

template<> inline const OVERLORD::RTS::S2C::ACK_PARTY_PLAYER_EXIT *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_PARTY_PLAYER_EXIT>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_PARTY_PLAYER_EXIT();
}

template<> inline const OVERLORD::RTS::S2C::ACK_PARTY_UPDATE_PUBLIC *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_PARTY_UPDATE_PUBLIC>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_PARTY_UPDATE_PUBLIC();
}

template<> inline const OVERLORD::RTS::S2C::ACK_PLAY_COUNT *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_PLAY_COUNT>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_PLAY_COUNT();
}

template<> inline const OVERLORD::RTS::S2C::ACK_PLAY_READY *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_PLAY_READY>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_PLAY_READY();
}

template<> inline const OVERLORD::RTS::S2C::ACK_PLAY_SEND_RESULT *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_PLAY_SEND_RESULT>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_PLAY_SEND_RESULT();
}

template<> inline const OVERLORD::RTS::S2C::ACK_PLAY_START *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_PLAY_START>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_PLAY_START();
}

template<> inline const OVERLORD::RTS::S2C::ACK_PLAY_TIMEOUT *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_PLAY_TIMEOUT>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_PLAY_TIMEOUT();
}

template<> inline const OVERLORD::RTS::S2C::ACK_STEP_GO *CMD_RTS::api_as<OVERLORD::RTS::S2C::ACK_STEP_GO>() const {
  return api_as_OVERLORD_RTS_S2C_ACK_STEP_GO();
}

template<> inline const OVERLORD::RTS::S2C::CHAT_CHANNEL_ENTER *CMD_RTS::api_as<OVERLORD::RTS::S2C::CHAT_CHANNEL_ENTER>() const {
  return api_as_OVERLORD_RTS_S2C_CHAT_CHANNEL_ENTER();
}

template<> inline const OVERLORD::RTS::S2C::CHAT_CHANNEL_EXIT *CMD_RTS::api_as<OVERLORD::RTS::S2C::CHAT_CHANNEL_EXIT>() const {
  return api_as_OVERLORD_RTS_S2C_CHAT_CHANNEL_EXIT();
}

template<> inline const OVERLORD::RTS::S2C::CHAT_MESSAGE *CMD_RTS::api_as<OVERLORD::RTS::S2C::CHAT_MESSAGE>() const {
  return api_as_OVERLORD_RTS_S2C_CHAT_MESSAGE();
}

template<> inline const OVERLORD::RTS::S2C::CHAT_SUBSCRIBED *CMD_RTS::api_as<OVERLORD::RTS::S2C::CHAT_SUBSCRIBED>() const {
  return api_as_OVERLORD_RTS_S2C_CHAT_SUBSCRIBED();
}

template<> inline const OVERLORD::RTS::S2C::CHAT_UNSUBSCRIBED *CMD_RTS::api_as<OVERLORD::RTS::S2C::CHAT_UNSUBSCRIBED>() const {
  return api_as_OVERLORD_RTS_S2C_CHAT_UNSUBSCRIBED();
}

template<> inline const OVERLORD::RTS::S2C::REQ_CINEMATIC_PLAY *CMD_RTS::api_as<OVERLORD::RTS::S2C::REQ_CINEMATIC_PLAY>() const {
  return api_as_OVERLORD_RTS_S2C_REQ_CINEMATIC_PLAY();
}

template<> inline const OVERLORD::RTS::S2C::REQ_STEP_READY *CMD_RTS::api_as<OVERLORD::RTS::S2C::REQ_STEP_READY>() const {
  return api_as_OVERLORD_RTS_S2C_REQ_STEP_READY();
}

struct CMD_RTSBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_api_type(UNION_RTS api_type) {
    fbb_.AddElement<uint8_t>(CMD_RTS::VT_API_TYPE, static_cast<uint8_t>(api_type), 0);
  }
  void add_api(flatbuffers::Offset<void> api) {
    fbb_.AddOffset(CMD_RTS::VT_API, api);
  }
  explicit CMD_RTSBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CMD_RTSBuilder &operator=(const CMD_RTSBuilder &);
  flatbuffers::Offset<CMD_RTS> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CMD_RTS>(end);
    return o;
  }
};

inline flatbuffers::Offset<CMD_RTS> CreateCMD_RTS(
    flatbuffers::FlatBufferBuilder &_fbb,
    UNION_RTS api_type = UNION_RTS_NONE,
    flatbuffers::Offset<void> api = 0) {
  CMD_RTSBuilder builder_(_fbb);
  builder_.add_api(api);
  builder_.add_api_type(api_type);
  return builder_.Finish();
}

flatbuffers::Offset<CMD_RTS> CreateCMD_RTS(flatbuffers::FlatBufferBuilder &_fbb, const CMD_RTST *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline CMD_RTST *CMD_RTS::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new CMD_RTST();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void CMD_RTS::UnPackTo(CMD_RTST *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = api_type(); _o->api.type = _e; };
  { auto _e = api(); if (_e) _o->api.value = UNION_RTSUnion::UnPack(_e, api_type(), _resolver); };
}

inline flatbuffers::Offset<CMD_RTS> CMD_RTS::Pack(flatbuffers::FlatBufferBuilder &_fbb, const CMD_RTST* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCMD_RTS(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<CMD_RTS> CreateCMD_RTS(flatbuffers::FlatBufferBuilder &_fbb, const CMD_RTST *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const CMD_RTST* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _api_type = _o->api.type;
  auto _api = _o->api.Pack(_fbb);
  return OVERLORD::CreateCMD_RTS(
      _fbb,
      _api_type,
      _api);
}

inline bool VerifyUNION_RTS(flatbuffers::Verifier &verifier, const void *obj, UNION_RTS type) {
  switch (type) {
    case UNION_RTS_NONE: {
      return true;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_ACK_CINEMATIC_DONE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::ACK_CINEMATIC_DONE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_ACK_STEP_AND_GO: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::ACK_STEP_AND_GO *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_CHAT_CHANNEL_MOVE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::CHAT_CHANNEL_MOVE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_CHAT_MESSAGE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::CHAT_MESSAGE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_CHAT_SUBSCRIBE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::CHAT_SUBSCRIBE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_AUTH: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_AUTH *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_CREATE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_CREATE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_FORMATION: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_FORMATION *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_MOVE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_MOVE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_SCORE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_SCORE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_SPAWN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_SPAWN *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_TELEPORT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_TELEPORT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ATTACK_NOW: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ATTACK_NOW *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_CHANGE_CREW: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_CHANGE_CREW *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_CHANGE_SPIRIT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_CHANGE_SPIRIT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_DICE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_DICE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_DROP_CREW: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_DROP_CREW *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ENTER: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ENTER *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_EXIT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_EXIT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_PLAYER_SCORE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_PLAYER_SCORE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_SKILL_CAST: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_SKILL_CAST *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_DECK_SELECT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_CS_DECK_SELECT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_DECK_SELECT_READY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_CS_DECK_SELECT_READY *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_PARTY_UI_READY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_CS_PARTY_UI_READY *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_DECK_SELECT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_DECK_SELECT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_DECK_SELECT_READY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_DECK_SELECT_READY *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_MATCH *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH_CANCEL: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_MATCH_CANCEL *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH_JOIN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_MATCH_JOIN *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_GO: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_PARTY_GO *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_UI_READY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_PARTY_UI_READY *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_UPDATE_PUBLIC: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_PARTY_UPDATE_PUBLIC *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_PING: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_PING *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_PLAY_READY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_PLAY_READY *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_IC_IC_BT_ACTOR_MOVE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::IC_BT_ACTOR_MOVE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_IC_IC_BT_ACTOR_RESPAWN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::IC_BT_ACTOR_RESPAWN *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_IC_IC_NPCHOST_STEP_ON: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::IC_NPCHOST_STEP_ON *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_IC_IC_SPAWN_NPC: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::IC_SPAWN_NPC *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_IC_NPC_HANDLER_JOIN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::NPC_HANDLER_JOIN *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_IC_ROOM_DISPOSE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::ROOM_DISPOSE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_IC_ROOM_JOIN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::ROOM_JOIN *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_IC_ROOM_PLAYER: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::ROOM_PLAYER *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_IC_ROOM_PLAYER_DISCONNECTED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::ROOM_PLAYER_DISCONNECTED *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_IC_ROOM_REJOIN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::ROOM_REJOIN *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_AUTH: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_AUTH *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_CREATE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_CREATE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_DESPAWN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_DESPAWN *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_DISAPPEAR: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_DISAPPEAR *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_FORMATION: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_FORMATION *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_MEDAL_UPDATE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_MEDAL_UPDATE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_RESPAWN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_RESPAWN *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_SPAWN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_SPAWN *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_TELEPORT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_TELEPORT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_UPDATE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_UPDATE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ATTACK_NORMAL: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ATTACK_NORMAL *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ATTACK_NOW: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ATTACK_NOW *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_CHANGE_CREW: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_CHANGE_CREW *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_CHANGE_SPIRIT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_CHANGE_SPIRIT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_COUNT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_DICE_COUNT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_NUM: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_DICE_NUM *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_OPEN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_DICE_OPEN *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_RESULT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_DICE_RESULT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DOOR_EVENT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_DOOR_EVENT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DROP_CREW: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_DROP_CREW *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_NEW_PLAYER: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_NEW_PLAYER *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_ACTIVATED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SKILL_ACTIVATED *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_BLOCKED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SKILL_BLOCKED *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SKILL_CASTED *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED_INTERVAL: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SKILL_CASTED_INTERVAL *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_SCORE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SYNC_ACTOR_SCORE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_UPDATE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SYNC_ACTOR_UPDATE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_PLAYER_SCORE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SYNC_PLAYER_SCORE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_SKILL_UPDATE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SYNC_SKILL_UPDATE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_TIME_REMAIN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SYNC_TIME_REMAIN *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_TEAM_POINT_UPDATE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_TEAM_POINT_UPDATE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ZONE_EVENT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ZONE_EVENT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ZONE_STATE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ZONE_STATE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_CINEMATIC_DONE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_CINEMATIC_DONE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_COMMON_ERROR: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_COMMON_ERROR *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_COST_UPDATE_AVATAR: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_COST_UPDATE_AVATAR *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_SELECT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_CS_DECK_SELECT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_SELECT_READY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_CS_DECK_SELECT_READY *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_TIME_REMAIN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_CS_DECK_TIME_REMAIN *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_MATCHED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_CS_MATCHED *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_CACHED_DONE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_DECK_CACHED_DONE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SCENE_LOADED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_DECK_SCENE_LOADED *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SELECT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_DECK_SELECT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SELECT_READY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_DECK_SELECT_READY *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_DISCONNECTED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_DISCONNECTED *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_MATCHED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_MATCHED *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_MATCH_ROUND: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_MATCH_ROUND *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_GO: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PARTY_GO *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_LEADER_SLOT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PARTY_LEADER_SLOT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_PLAYER: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PARTY_PLAYER *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_PLAYER_EXIT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PARTY_PLAYER_EXIT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_UPDATE_PUBLIC: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PARTY_UPDATE_PUBLIC *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_COUNT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PLAY_COUNT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_READY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PLAY_READY *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_SEND_RESULT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PLAY_SEND_RESULT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_START: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PLAY_START *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_TIMEOUT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PLAY_TIMEOUT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_STEP_GO: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_STEP_GO *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_CHAT_CHANNEL_ENTER: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::CHAT_CHANNEL_ENTER *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_CHAT_CHANNEL_EXIT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::CHAT_CHANNEL_EXIT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_CHAT_MESSAGE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::CHAT_MESSAGE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_CHAT_SUBSCRIBED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::CHAT_SUBSCRIBED *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_CHAT_UNSUBSCRIBED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::CHAT_UNSUBSCRIBED *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_REQ_CINEMATIC_PLAY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::REQ_CINEMATIC_PLAY *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_REQ_STEP_READY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::REQ_STEP_READY *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyUNION_RTSVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyUNION_RTS(
        verifier,  values->Get(i), types->GetEnum<UNION_RTS>(i))) {
      return false;
    }
  }
  return true;
}

inline void *UNION_RTSUnion::UnPack(const void *obj, UNION_RTS type, const flatbuffers::resolver_function_t *resolver) {
  switch (type) {
    case UNION_RTS_OVERLORD_RTS_C2S_ACK_CINEMATIC_DONE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::ACK_CINEMATIC_DONE *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_ACK_STEP_AND_GO: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::ACK_STEP_AND_GO *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_CHAT_CHANNEL_MOVE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::CHAT_CHANNEL_MOVE *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_CHAT_MESSAGE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::CHAT_MESSAGE *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_CHAT_SUBSCRIBE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::CHAT_SUBSCRIBE *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_AUTH: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_AUTH *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_CREATE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_CREATE *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_FORMATION: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_FORMATION *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_MOVE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_MOVE *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_SCORE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_SCORE *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_SPAWN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_SPAWN *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_TELEPORT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_TELEPORT *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ATTACK_NOW: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ATTACK_NOW *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_CHANGE_CREW: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_CHANGE_CREW *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_CHANGE_SPIRIT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_CHANGE_SPIRIT *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_DICE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_DICE *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_DROP_CREW: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_DROP_CREW *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ENTER: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ENTER *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_EXIT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_EXIT *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_PLAYER_SCORE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_PLAYER_SCORE *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_SKILL_CAST: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_SKILL_CAST *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_DECK_SELECT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_CS_DECK_SELECT *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_DECK_SELECT_READY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_CS_DECK_SELECT_READY *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_PARTY_UI_READY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_CS_PARTY_UI_READY *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_DECK_SELECT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_DECK_SELECT *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_DECK_SELECT_READY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_DECK_SELECT_READY *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_MATCH *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH_CANCEL: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_MATCH_CANCEL *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH_JOIN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_MATCH_JOIN *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_GO: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_PARTY_GO *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_UI_READY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_PARTY_UI_READY *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_UPDATE_PUBLIC: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_PARTY_UPDATE_PUBLIC *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_PING: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_PING *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_PLAY_READY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_PLAY_READY *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_IC_IC_BT_ACTOR_MOVE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::IC_BT_ACTOR_MOVE *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_IC_IC_BT_ACTOR_RESPAWN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::IC_BT_ACTOR_RESPAWN *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_IC_IC_NPCHOST_STEP_ON: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::IC_NPCHOST_STEP_ON *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_IC_IC_SPAWN_NPC: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::IC_SPAWN_NPC *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_IC_NPC_HANDLER_JOIN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::NPC_HANDLER_JOIN *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_IC_ROOM_DISPOSE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::ROOM_DISPOSE *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_IC_ROOM_JOIN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::ROOM_JOIN *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_IC_ROOM_PLAYER: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::ROOM_PLAYER *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_IC_ROOM_PLAYER_DISCONNECTED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::ROOM_PLAYER_DISCONNECTED *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_IC_ROOM_REJOIN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::ROOM_REJOIN *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_AUTH: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_AUTH *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_CREATE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_CREATE *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_DESPAWN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_DESPAWN *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_DISAPPEAR: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_DISAPPEAR *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_FORMATION: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_FORMATION *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_MEDAL_UPDATE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_MEDAL_UPDATE *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_RESPAWN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_RESPAWN *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_SPAWN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_SPAWN *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_TELEPORT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_TELEPORT *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_UPDATE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_UPDATE *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ATTACK_NORMAL: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ATTACK_NORMAL *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ATTACK_NOW: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ATTACK_NOW *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_CHANGE_CREW: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_CHANGE_CREW *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_CHANGE_SPIRIT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_CHANGE_SPIRIT *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_COUNT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_DICE_COUNT *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_NUM: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_DICE_NUM *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_OPEN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_DICE_OPEN *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_RESULT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_DICE_RESULT *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DOOR_EVENT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_DOOR_EVENT *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DROP_CREW: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_DROP_CREW *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_NEW_PLAYER: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_NEW_PLAYER *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_ACTIVATED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SKILL_ACTIVATED *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_BLOCKED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SKILL_BLOCKED *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SKILL_CASTED *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED_INTERVAL: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SKILL_CASTED_INTERVAL *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_SCORE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SYNC_ACTOR_SCORE *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_UPDATE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SYNC_ACTOR_UPDATE *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_PLAYER_SCORE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SYNC_PLAYER_SCORE *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_SKILL_UPDATE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SYNC_SKILL_UPDATE *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_TIME_REMAIN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SYNC_TIME_REMAIN *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_TEAM_POINT_UPDATE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_TEAM_POINT_UPDATE *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ZONE_EVENT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ZONE_EVENT *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ZONE_STATE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ZONE_STATE *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_CINEMATIC_DONE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_CINEMATIC_DONE *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_COMMON_ERROR: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_COMMON_ERROR *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_COST_UPDATE_AVATAR: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_COST_UPDATE_AVATAR *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_SELECT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_CS_DECK_SELECT *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_SELECT_READY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_CS_DECK_SELECT_READY *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_TIME_REMAIN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_CS_DECK_TIME_REMAIN *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_MATCHED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_CS_MATCHED *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_CACHED_DONE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_DECK_CACHED_DONE *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SCENE_LOADED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_DECK_SCENE_LOADED *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SELECT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_DECK_SELECT *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SELECT_READY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_DECK_SELECT_READY *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_DISCONNECTED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_DISCONNECTED *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_MATCHED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_MATCHED *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_MATCH_ROUND: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_MATCH_ROUND *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_GO: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PARTY_GO *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_LEADER_SLOT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PARTY_LEADER_SLOT *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_PLAYER: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PARTY_PLAYER *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_PLAYER_EXIT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PARTY_PLAYER_EXIT *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_UPDATE_PUBLIC: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PARTY_UPDATE_PUBLIC *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_COUNT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PLAY_COUNT *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_READY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PLAY_READY *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_SEND_RESULT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PLAY_SEND_RESULT *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_START: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PLAY_START *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_TIMEOUT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PLAY_TIMEOUT *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_STEP_GO: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_STEP_GO *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_CHAT_CHANNEL_ENTER: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::CHAT_CHANNEL_ENTER *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_CHAT_CHANNEL_EXIT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::CHAT_CHANNEL_EXIT *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_CHAT_MESSAGE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::CHAT_MESSAGE *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_CHAT_SUBSCRIBED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::CHAT_SUBSCRIBED *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_CHAT_UNSUBSCRIBED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::CHAT_UNSUBSCRIBED *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_REQ_CINEMATIC_PLAY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::REQ_CINEMATIC_PLAY *>(obj);
      return ptr->UnPack(resolver);
    }
    case UNION_RTS_OVERLORD_RTS_S2C_REQ_STEP_READY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::REQ_STEP_READY *>(obj);
      return ptr->UnPack(resolver);
    }
    default: return nullptr;
  }
}

inline flatbuffers::Offset<void> UNION_RTSUnion::Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbuffers::rehasher_function_t *_rehasher) const {
  switch (type) {
    case UNION_RTS_OVERLORD_RTS_C2S_ACK_CINEMATIC_DONE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::ACK_CINEMATIC_DONET *>(value);
      return CreateACK_CINEMATIC_DONE(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_ACK_STEP_AND_GO: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::ACK_STEP_AND_GOT *>(value);
      return CreateACK_STEP_AND_GO(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_CHAT_CHANNEL_MOVE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::CHAT_CHANNEL_MOVET *>(value);
      return CreateCHAT_CHANNEL_MOVE(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_CHAT_MESSAGE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::CHAT_MESSAGET *>(value);
      return CreateCHAT_MESSAGE(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_CHAT_SUBSCRIBE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::CHAT_SUBSCRIBET *>(value);
      return CreateCHAT_SUBSCRIBE(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_AUTH: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_AUTHT *>(value);
      return CreateREQ_AUTH(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_CREATE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_CREATET *>(value);
      return CreateREQ_BT_ACTOR_CREATE(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_FORMATION: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_FORMATIONT *>(value);
      return CreateREQ_BT_ACTOR_FORMATION(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_MOVE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_MOVET *>(value);
      return CreateREQ_BT_ACTOR_MOVE(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_SCORE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_SCORET *>(value);
      return CreateREQ_BT_ACTOR_SCORE(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_SPAWN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_SPAWNT *>(value);
      return CreateREQ_BT_ACTOR_SPAWN(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_TELEPORT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ACTOR_TELEPORTT *>(value);
      return CreateREQ_BT_ACTOR_TELEPORT(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ATTACK_NOW: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ATTACK_NOWT *>(value);
      return CreateREQ_BT_ATTACK_NOW(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_CHANGE_CREW: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_CHANGE_CREWT *>(value);
      return CreateREQ_BT_CHANGE_CREW(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_CHANGE_SPIRIT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_CHANGE_SPIRITT *>(value);
      return CreateREQ_BT_CHANGE_SPIRIT(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_DICE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_DICET *>(value);
      return CreateREQ_BT_DICE(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_DROP_CREW: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_DROP_CREWT *>(value);
      return CreateREQ_BT_DROP_CREW(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ENTER: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_ENTERT *>(value);
      return CreateREQ_BT_ENTER(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_EXIT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_EXITT *>(value);
      return CreateREQ_BT_EXIT(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_PLAYER_SCORE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_PLAYER_SCORET *>(value);
      return CreateREQ_BT_PLAYER_SCORE(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_SKILL_CAST: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_BT_SKILL_CASTT *>(value);
      return CreateREQ_BT_SKILL_CAST(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_DECK_SELECT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_CS_DECK_SELECTT *>(value);
      return CreateREQ_CS_DECK_SELECT(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_DECK_SELECT_READY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_CS_DECK_SELECT_READYT *>(value);
      return CreateREQ_CS_DECK_SELECT_READY(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_PARTY_UI_READY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_CS_PARTY_UI_READYT *>(value);
      return CreateREQ_CS_PARTY_UI_READY(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_DECK_SELECT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_DECK_SELECTT *>(value);
      return CreateREQ_DECK_SELECT(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_DECK_SELECT_READY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_DECK_SELECT_READYT *>(value);
      return CreateREQ_DECK_SELECT_READY(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_MATCHT *>(value);
      return CreateREQ_MATCH(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH_CANCEL: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_MATCH_CANCELT *>(value);
      return CreateREQ_MATCH_CANCEL(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH_JOIN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_MATCH_JOINT *>(value);
      return CreateREQ_MATCH_JOIN(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_GO: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_PARTY_GOT *>(value);
      return CreateREQ_PARTY_GO(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_UI_READY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_PARTY_UI_READYT *>(value);
      return CreateREQ_PARTY_UI_READY(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_UPDATE_PUBLIC: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_PARTY_UPDATE_PUBLICT *>(value);
      return CreateREQ_PARTY_UPDATE_PUBLIC(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_PING: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_PINGT *>(value);
      return CreateREQ_PING(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_PLAY_READY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::C2S::REQ_PLAY_READYT *>(value);
      return CreateREQ_PLAY_READY(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_IC_IC_BT_ACTOR_MOVE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::IC_BT_ACTOR_MOVET *>(value);
      return CreateIC_BT_ACTOR_MOVE(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_IC_IC_BT_ACTOR_RESPAWN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::IC_BT_ACTOR_RESPAWNT *>(value);
      return CreateIC_BT_ACTOR_RESPAWN(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_IC_IC_NPCHOST_STEP_ON: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::IC_NPCHOST_STEP_ONT *>(value);
      return CreateIC_NPCHOST_STEP_ON(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_IC_IC_SPAWN_NPC: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::IC_SPAWN_NPCT *>(value);
      return CreateIC_SPAWN_NPC(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_IC_NPC_HANDLER_JOIN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::NPC_HANDLER_JOINT *>(value);
      return CreateNPC_HANDLER_JOIN(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_IC_ROOM_DISPOSE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::ROOM_DISPOSET *>(value);
      return CreateROOM_DISPOSE(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_IC_ROOM_JOIN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::ROOM_JOINT *>(value);
      return CreateROOM_JOIN(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_IC_ROOM_PLAYER: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::ROOM_PLAYERT *>(value);
      return CreateROOM_PLAYER(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_IC_ROOM_PLAYER_DISCONNECTED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::ROOM_PLAYER_DISCONNECTEDT *>(value);
      return CreateROOM_PLAYER_DISCONNECTED(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_IC_ROOM_REJOIN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::IC::ROOM_REJOINT *>(value);
      return CreateROOM_REJOIN(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_AUTH: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_AUTHT *>(value);
      return CreateACK_AUTH(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_CREATE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_CREATET *>(value);
      return CreateACK_BT_ACTOR_CREATE(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_DESPAWN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_DESPAWNT *>(value);
      return CreateACK_BT_ACTOR_DESPAWN(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_DISAPPEAR: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_DISAPPEART *>(value);
      return CreateACK_BT_ACTOR_DISAPPEAR(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_FORMATION: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_FORMATIONT *>(value);
      return CreateACK_BT_ACTOR_FORMATION(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_MEDAL_UPDATE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_MEDAL_UPDATET *>(value);
      return CreateACK_BT_ACTOR_MEDAL_UPDATE(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_RESPAWN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_RESPAWNT *>(value);
      return CreateACK_BT_ACTOR_RESPAWN(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_SPAWN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_SPAWNT *>(value);
      return CreateACK_BT_ACTOR_SPAWN(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_TELEPORT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_TELEPORTT *>(value);
      return CreateACK_BT_ACTOR_TELEPORT(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_UPDATE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ACTOR_UPDATET *>(value);
      return CreateACK_BT_ACTOR_UPDATE(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ATTACK_NORMAL: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ATTACK_NORMALT *>(value);
      return CreateACK_BT_ATTACK_NORMAL(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ATTACK_NOW: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ATTACK_NOWT *>(value);
      return CreateACK_BT_ATTACK_NOW(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_CHANGE_CREW: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_CHANGE_CREWT *>(value);
      return CreateACK_BT_CHANGE_CREW(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_CHANGE_SPIRIT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_CHANGE_SPIRITT *>(value);
      return CreateACK_BT_CHANGE_SPIRIT(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_COUNT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_DICE_COUNTT *>(value);
      return CreateACK_BT_DICE_COUNT(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_NUM: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_DICE_NUMT *>(value);
      return CreateACK_BT_DICE_NUM(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_OPEN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_DICE_OPENT *>(value);
      return CreateACK_BT_DICE_OPEN(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_RESULT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_DICE_RESULTT *>(value);
      return CreateACK_BT_DICE_RESULT(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DOOR_EVENT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_DOOR_EVENTT *>(value);
      return CreateACK_BT_DOOR_EVENT(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DROP_CREW: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_DROP_CREWT *>(value);
      return CreateACK_BT_DROP_CREW(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_NEW_PLAYER: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_NEW_PLAYERT *>(value);
      return CreateACK_BT_NEW_PLAYER(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_ACTIVATED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SKILL_ACTIVATEDT *>(value);
      return CreateACK_BT_SKILL_ACTIVATED(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_BLOCKED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SKILL_BLOCKEDT *>(value);
      return CreateACK_BT_SKILL_BLOCKED(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SKILL_CASTEDT *>(value);
      return CreateACK_BT_SKILL_CASTED(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED_INTERVAL: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SKILL_CASTED_INTERVALT *>(value);
      return CreateACK_BT_SKILL_CASTED_INTERVAL(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_SCORE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SYNC_ACTOR_SCORET *>(value);
      return CreateACK_BT_SYNC_ACTOR_SCORE(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_UPDATE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SYNC_ACTOR_UPDATET *>(value);
      return CreateACK_BT_SYNC_ACTOR_UPDATE(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_PLAYER_SCORE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SYNC_PLAYER_SCORET *>(value);
      return CreateACK_BT_SYNC_PLAYER_SCORE(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_SKILL_UPDATE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SYNC_SKILL_UPDATET *>(value);
      return CreateACK_BT_SYNC_SKILL_UPDATE(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_TIME_REMAIN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_SYNC_TIME_REMAINT *>(value);
      return CreateACK_BT_SYNC_TIME_REMAIN(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_TEAM_POINT_UPDATE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_TEAM_POINT_UPDATET *>(value);
      return CreateACK_BT_TEAM_POINT_UPDATE(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ZONE_EVENT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ZONE_EVENTT *>(value);
      return CreateACK_BT_ZONE_EVENT(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ZONE_STATE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_BT_ZONE_STATET *>(value);
      return CreateACK_BT_ZONE_STATE(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_CINEMATIC_DONE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_CINEMATIC_DONET *>(value);
      return CreateACK_CINEMATIC_DONE(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_COMMON_ERROR: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_COMMON_ERRORT *>(value);
      return CreateACK_COMMON_ERROR(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_COST_UPDATE_AVATAR: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_COST_UPDATE_AVATART *>(value);
      return CreateACK_COST_UPDATE_AVATAR(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_SELECT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_CS_DECK_SELECTT *>(value);
      return CreateACK_CS_DECK_SELECT(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_SELECT_READY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_CS_DECK_SELECT_READYT *>(value);
      return CreateACK_CS_DECK_SELECT_READY(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_TIME_REMAIN: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_CS_DECK_TIME_REMAINT *>(value);
      return CreateACK_CS_DECK_TIME_REMAIN(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_MATCHED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_CS_MATCHEDT *>(value);
      return CreateACK_CS_MATCHED(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_CACHED_DONE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_DECK_CACHED_DONET *>(value);
      return CreateACK_DECK_CACHED_DONE(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SCENE_LOADED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_DECK_SCENE_LOADEDT *>(value);
      return CreateACK_DECK_SCENE_LOADED(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SELECT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_DECK_SELECTT *>(value);
      return CreateACK_DECK_SELECT(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SELECT_READY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_DECK_SELECT_READYT *>(value);
      return CreateACK_DECK_SELECT_READY(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_DISCONNECTED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_DISCONNECTEDT *>(value);
      return CreateACK_DISCONNECTED(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_MATCHED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_MATCHEDT *>(value);
      return CreateACK_MATCHED(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_MATCH_ROUND: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_MATCH_ROUNDT *>(value);
      return CreateACK_MATCH_ROUND(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_GO: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PARTY_GOT *>(value);
      return CreateACK_PARTY_GO(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_LEADER_SLOT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PARTY_LEADER_SLOTT *>(value);
      return CreateACK_PARTY_LEADER_SLOT(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_PLAYER: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PARTY_PLAYERT *>(value);
      return CreateACK_PARTY_PLAYER(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_PLAYER_EXIT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PARTY_PLAYER_EXITT *>(value);
      return CreateACK_PARTY_PLAYER_EXIT(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_UPDATE_PUBLIC: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PARTY_UPDATE_PUBLICT *>(value);
      return CreateACK_PARTY_UPDATE_PUBLIC(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_COUNT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PLAY_COUNTT *>(value);
      return CreateACK_PLAY_COUNT(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_READY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PLAY_READYT *>(value);
      return CreateACK_PLAY_READY(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_SEND_RESULT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PLAY_SEND_RESULTT *>(value);
      return CreateACK_PLAY_SEND_RESULT(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_START: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PLAY_STARTT *>(value);
      return CreateACK_PLAY_START(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_TIMEOUT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_PLAY_TIMEOUTT *>(value);
      return CreateACK_PLAY_TIMEOUT(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_STEP_GO: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::ACK_STEP_GOT *>(value);
      return CreateACK_STEP_GO(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_CHAT_CHANNEL_ENTER: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::CHAT_CHANNEL_ENTERT *>(value);
      return CreateCHAT_CHANNEL_ENTER(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_CHAT_CHANNEL_EXIT: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::CHAT_CHANNEL_EXITT *>(value);
      return CreateCHAT_CHANNEL_EXIT(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_CHAT_MESSAGE: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::CHAT_MESSAGET *>(value);
      return CreateCHAT_MESSAGE(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_CHAT_SUBSCRIBED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::CHAT_SUBSCRIBEDT *>(value);
      return CreateCHAT_SUBSCRIBED(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_CHAT_UNSUBSCRIBED: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::CHAT_UNSUBSCRIBEDT *>(value);
      return CreateCHAT_UNSUBSCRIBED(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_REQ_CINEMATIC_PLAY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::REQ_CINEMATIC_PLAYT *>(value);
      return CreateREQ_CINEMATIC_PLAY(_fbb, ptr, _rehasher).Union();
    }
    case UNION_RTS_OVERLORD_RTS_S2C_REQ_STEP_READY: {
      auto ptr = reinterpret_cast<const OVERLORD::RTS::S2C::REQ_STEP_READYT *>(value);
      return CreateREQ_STEP_READY(_fbb, ptr, _rehasher).Union();
    }
    default: return 0;
  }
}

inline UNION_RTSUnion::UNION_RTSUnion(const UNION_RTSUnion &u) FLATBUFFERS_NOEXCEPT : type(u.type), value(nullptr) {
  switch (type) {
    case UNION_RTS_OVERLORD_RTS_C2S_ACK_CINEMATIC_DONE: {
      value = new OVERLORD::RTS::C2S::ACK_CINEMATIC_DONET(*reinterpret_cast<OVERLORD::RTS::C2S::ACK_CINEMATIC_DONET *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_ACK_STEP_AND_GO: {
      value = new OVERLORD::RTS::C2S::ACK_STEP_AND_GOT(*reinterpret_cast<OVERLORD::RTS::C2S::ACK_STEP_AND_GOT *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_CHAT_CHANNEL_MOVE: {
      value = new OVERLORD::RTS::C2S::CHAT_CHANNEL_MOVET(*reinterpret_cast<OVERLORD::RTS::C2S::CHAT_CHANNEL_MOVET *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_CHAT_MESSAGE: {
      value = new OVERLORD::RTS::C2S::CHAT_MESSAGET(*reinterpret_cast<OVERLORD::RTS::C2S::CHAT_MESSAGET *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_CHAT_SUBSCRIBE: {
      value = new OVERLORD::RTS::C2S::CHAT_SUBSCRIBET(*reinterpret_cast<OVERLORD::RTS::C2S::CHAT_SUBSCRIBET *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_AUTH: {
      value = new OVERLORD::RTS::C2S::REQ_AUTHT(*reinterpret_cast<OVERLORD::RTS::C2S::REQ_AUTHT *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_CREATE: {
      value = new OVERLORD::RTS::C2S::REQ_BT_ACTOR_CREATET(*reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_ACTOR_CREATET *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_FORMATION: {
      value = new OVERLORD::RTS::C2S::REQ_BT_ACTOR_FORMATIONT(*reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_ACTOR_FORMATIONT *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_MOVE: {
      assert(false);  // OVERLORD::RTS::C2S::REQ_BT_ACTOR_MOVET not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_SCORE: {
      value = new OVERLORD::RTS::C2S::REQ_BT_ACTOR_SCORET(*reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_ACTOR_SCORET *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_SPAWN: {
      assert(false);  // OVERLORD::RTS::C2S::REQ_BT_ACTOR_SPAWNT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_TELEPORT: {
      value = new OVERLORD::RTS::C2S::REQ_BT_ACTOR_TELEPORTT(*reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_ACTOR_TELEPORTT *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ATTACK_NOW: {
      assert(false);  // OVERLORD::RTS::C2S::REQ_BT_ATTACK_NOWT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_CHANGE_CREW: {
      assert(false);  // OVERLORD::RTS::C2S::REQ_BT_CHANGE_CREWT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_CHANGE_SPIRIT: {
      value = new OVERLORD::RTS::C2S::REQ_BT_CHANGE_SPIRITT(*reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_CHANGE_SPIRITT *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_DICE: {
      value = new OVERLORD::RTS::C2S::REQ_BT_DICET(*reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_DICET *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_DROP_CREW: {
      assert(false);  // OVERLORD::RTS::C2S::REQ_BT_DROP_CREWT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ENTER: {
      value = new OVERLORD::RTS::C2S::REQ_BT_ENTERT(*reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_ENTERT *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_EXIT: {
      value = new OVERLORD::RTS::C2S::REQ_BT_EXITT(*reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_EXITT *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_PLAYER_SCORE: {
      value = new OVERLORD::RTS::C2S::REQ_BT_PLAYER_SCORET(*reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_PLAYER_SCORET *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_SKILL_CAST: {
      assert(false);  // OVERLORD::RTS::C2S::REQ_BT_SKILL_CASTT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_DECK_SELECT: {
      value = new OVERLORD::RTS::C2S::REQ_CS_DECK_SELECTT(*reinterpret_cast<OVERLORD::RTS::C2S::REQ_CS_DECK_SELECTT *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_DECK_SELECT_READY: {
      value = new OVERLORD::RTS::C2S::REQ_CS_DECK_SELECT_READYT(*reinterpret_cast<OVERLORD::RTS::C2S::REQ_CS_DECK_SELECT_READYT *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_PARTY_UI_READY: {
      value = new OVERLORD::RTS::C2S::REQ_CS_PARTY_UI_READYT(*reinterpret_cast<OVERLORD::RTS::C2S::REQ_CS_PARTY_UI_READYT *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_DECK_SELECT: {
      value = new OVERLORD::RTS::C2S::REQ_DECK_SELECTT(*reinterpret_cast<OVERLORD::RTS::C2S::REQ_DECK_SELECTT *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_DECK_SELECT_READY: {
      value = new OVERLORD::RTS::C2S::REQ_DECK_SELECT_READYT(*reinterpret_cast<OVERLORD::RTS::C2S::REQ_DECK_SELECT_READYT *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH: {
      value = new OVERLORD::RTS::C2S::REQ_MATCHT(*reinterpret_cast<OVERLORD::RTS::C2S::REQ_MATCHT *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH_CANCEL: {
      value = new OVERLORD::RTS::C2S::REQ_MATCH_CANCELT(*reinterpret_cast<OVERLORD::RTS::C2S::REQ_MATCH_CANCELT *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH_JOIN: {
      value = new OVERLORD::RTS::C2S::REQ_MATCH_JOINT(*reinterpret_cast<OVERLORD::RTS::C2S::REQ_MATCH_JOINT *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_GO: {
      value = new OVERLORD::RTS::C2S::REQ_PARTY_GOT(*reinterpret_cast<OVERLORD::RTS::C2S::REQ_PARTY_GOT *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_UI_READY: {
      value = new OVERLORD::RTS::C2S::REQ_PARTY_UI_READYT(*reinterpret_cast<OVERLORD::RTS::C2S::REQ_PARTY_UI_READYT *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_UPDATE_PUBLIC: {
      value = new OVERLORD::RTS::C2S::REQ_PARTY_UPDATE_PUBLICT(*reinterpret_cast<OVERLORD::RTS::C2S::REQ_PARTY_UPDATE_PUBLICT *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_PING: {
      value = new OVERLORD::RTS::C2S::REQ_PINGT(*reinterpret_cast<OVERLORD::RTS::C2S::REQ_PINGT *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_PLAY_READY: {
      value = new OVERLORD::RTS::C2S::REQ_PLAY_READYT(*reinterpret_cast<OVERLORD::RTS::C2S::REQ_PLAY_READYT *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_IC_IC_BT_ACTOR_MOVE: {
      assert(false);  // OVERLORD::RTS::IC::IC_BT_ACTOR_MOVET not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_IC_IC_BT_ACTOR_RESPAWN: {
      assert(false);  // OVERLORD::RTS::IC::IC_BT_ACTOR_RESPAWNT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_IC_IC_NPCHOST_STEP_ON: {
      value = new OVERLORD::RTS::IC::IC_NPCHOST_STEP_ONT(*reinterpret_cast<OVERLORD::RTS::IC::IC_NPCHOST_STEP_ONT *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_IC_IC_SPAWN_NPC: {
      assert(false);  // OVERLORD::RTS::IC::IC_SPAWN_NPCT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_IC_NPC_HANDLER_JOIN: {
      value = new OVERLORD::RTS::IC::NPC_HANDLER_JOINT(*reinterpret_cast<OVERLORD::RTS::IC::NPC_HANDLER_JOINT *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_IC_ROOM_DISPOSE: {
      value = new OVERLORD::RTS::IC::ROOM_DISPOSET(*reinterpret_cast<OVERLORD::RTS::IC::ROOM_DISPOSET *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_IC_ROOM_JOIN: {
      assert(false);  // OVERLORD::RTS::IC::ROOM_JOINT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_IC_ROOM_PLAYER: {
      assert(false);  // OVERLORD::RTS::IC::ROOM_PLAYERT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_IC_ROOM_PLAYER_DISCONNECTED: {
      value = new OVERLORD::RTS::IC::ROOM_PLAYER_DISCONNECTEDT(*reinterpret_cast<OVERLORD::RTS::IC::ROOM_PLAYER_DISCONNECTEDT *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_IC_ROOM_REJOIN: {
      assert(false);  // OVERLORD::RTS::IC::ROOM_REJOINT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_AUTH: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_AUTHT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_CREATE: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_ACTOR_CREATET not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_DESPAWN: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_ACTOR_DESPAWNT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_DISAPPEAR: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_ACTOR_DISAPPEART not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_FORMATION: {
      value = new OVERLORD::RTS::S2C::ACK_BT_ACTOR_FORMATIONT(*reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_ACTOR_FORMATIONT *>(u.value));
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_MEDAL_UPDATE: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_ACTOR_MEDAL_UPDATET not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_RESPAWN: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_ACTOR_RESPAWNT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_SPAWN: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_ACTOR_SPAWNT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_TELEPORT: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_ACTOR_TELEPORTT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_UPDATE: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_ACTOR_UPDATET not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ATTACK_NORMAL: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_ATTACK_NORMALT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ATTACK_NOW: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_ATTACK_NOWT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_CHANGE_CREW: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_CHANGE_CREWT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_CHANGE_SPIRIT: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_CHANGE_SPIRITT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_COUNT: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_DICE_COUNTT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_NUM: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_DICE_NUMT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_OPEN: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_DICE_OPENT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_RESULT: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_DICE_RESULTT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DOOR_EVENT: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_DOOR_EVENTT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DROP_CREW: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_DROP_CREWT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_NEW_PLAYER: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_NEW_PLAYERT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_ACTIVATED: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_SKILL_ACTIVATEDT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_BLOCKED: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_SKILL_BLOCKEDT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_SKILL_CASTEDT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED_INTERVAL: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_SKILL_CASTED_INTERVALT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_SCORE: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_SYNC_ACTOR_SCORET not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_UPDATE: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_SYNC_ACTOR_UPDATET not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_PLAYER_SCORE: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_SYNC_PLAYER_SCORET not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_SKILL_UPDATE: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_SYNC_SKILL_UPDATET not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_TIME_REMAIN: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_SYNC_TIME_REMAINT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_TEAM_POINT_UPDATE: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_TEAM_POINT_UPDATET not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ZONE_EVENT: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_ZONE_EVENTT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ZONE_STATE: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_BT_ZONE_STATET not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_CINEMATIC_DONE: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_CINEMATIC_DONET not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_COMMON_ERROR: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_COMMON_ERRORT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_COST_UPDATE_AVATAR: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_COST_UPDATE_AVATART not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_SELECT: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_CS_DECK_SELECTT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_SELECT_READY: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_CS_DECK_SELECT_READYT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_TIME_REMAIN: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_CS_DECK_TIME_REMAINT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_MATCHED: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_CS_MATCHEDT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_CACHED_DONE: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_DECK_CACHED_DONET not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SCENE_LOADED: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_DECK_SCENE_LOADEDT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SELECT: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_DECK_SELECTT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SELECT_READY: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_DECK_SELECT_READYT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_DISCONNECTED: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_DISCONNECTEDT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_MATCHED: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_MATCHEDT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_MATCH_ROUND: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_MATCH_ROUNDT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_GO: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_PARTY_GOT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_LEADER_SLOT: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_PARTY_LEADER_SLOTT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_PLAYER: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_PARTY_PLAYERT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_PLAYER_EXIT: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_PARTY_PLAYER_EXITT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_UPDATE_PUBLIC: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_PARTY_UPDATE_PUBLICT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_COUNT: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_PLAY_COUNTT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_READY: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_PLAY_READYT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_SEND_RESULT: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_PLAY_SEND_RESULTT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_START: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_PLAY_STARTT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_TIMEOUT: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_PLAY_TIMEOUTT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_STEP_GO: {
      assert(false);  // OVERLORD::RTS::S2C::ACK_STEP_GOT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_CHAT_CHANNEL_ENTER: {
      assert(false);  // OVERLORD::RTS::S2C::CHAT_CHANNEL_ENTERT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_CHAT_CHANNEL_EXIT: {
      assert(false);  // OVERLORD::RTS::S2C::CHAT_CHANNEL_EXITT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_CHAT_MESSAGE: {
      assert(false);  // OVERLORD::RTS::S2C::CHAT_MESSAGET not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_CHAT_SUBSCRIBED: {
      assert(false);  // OVERLORD::RTS::S2C::CHAT_SUBSCRIBEDT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_CHAT_UNSUBSCRIBED: {
      assert(false);  // OVERLORD::RTS::S2C::CHAT_UNSUBSCRIBEDT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_REQ_CINEMATIC_PLAY: {
      assert(false);  // OVERLORD::RTS::S2C::REQ_CINEMATIC_PLAYT not copyable.
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_REQ_STEP_READY: {
      assert(false);  // OVERLORD::RTS::S2C::REQ_STEP_READYT not copyable.
      break;
    }
    default:
      break;
  }
}

inline void UNION_RTSUnion::Reset() {
  switch (type) {
    case UNION_RTS_OVERLORD_RTS_C2S_ACK_CINEMATIC_DONE: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::ACK_CINEMATIC_DONET *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_ACK_STEP_AND_GO: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::ACK_STEP_AND_GOT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_CHAT_CHANNEL_MOVE: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::CHAT_CHANNEL_MOVET *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_CHAT_MESSAGE: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::CHAT_MESSAGET *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_CHAT_SUBSCRIBE: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::CHAT_SUBSCRIBET *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_AUTH: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_AUTHT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_CREATE: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_ACTOR_CREATET *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_FORMATION: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_ACTOR_FORMATIONT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_MOVE: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_ACTOR_MOVET *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_SCORE: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_ACTOR_SCORET *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_SPAWN: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_ACTOR_SPAWNT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ACTOR_TELEPORT: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_ACTOR_TELEPORTT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ATTACK_NOW: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_ATTACK_NOWT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_CHANGE_CREW: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_CHANGE_CREWT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_CHANGE_SPIRIT: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_CHANGE_SPIRITT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_DICE: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_DICET *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_DROP_CREW: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_DROP_CREWT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_ENTER: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_ENTERT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_EXIT: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_EXITT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_PLAYER_SCORE: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_PLAYER_SCORET *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_BT_SKILL_CAST: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_BT_SKILL_CASTT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_DECK_SELECT: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_CS_DECK_SELECTT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_DECK_SELECT_READY: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_CS_DECK_SELECT_READYT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_CS_PARTY_UI_READY: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_CS_PARTY_UI_READYT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_DECK_SELECT: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_DECK_SELECTT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_DECK_SELECT_READY: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_DECK_SELECT_READYT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_MATCHT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH_CANCEL: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_MATCH_CANCELT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_MATCH_JOIN: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_MATCH_JOINT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_GO: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_PARTY_GOT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_UI_READY: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_PARTY_UI_READYT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_PARTY_UPDATE_PUBLIC: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_PARTY_UPDATE_PUBLICT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_PING: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_PINGT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_C2S_REQ_PLAY_READY: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::C2S::REQ_PLAY_READYT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_IC_IC_BT_ACTOR_MOVE: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::IC::IC_BT_ACTOR_MOVET *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_IC_IC_BT_ACTOR_RESPAWN: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::IC::IC_BT_ACTOR_RESPAWNT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_IC_IC_NPCHOST_STEP_ON: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::IC::IC_NPCHOST_STEP_ONT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_IC_IC_SPAWN_NPC: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::IC::IC_SPAWN_NPCT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_IC_NPC_HANDLER_JOIN: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::IC::NPC_HANDLER_JOINT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_IC_ROOM_DISPOSE: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::IC::ROOM_DISPOSET *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_IC_ROOM_JOIN: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::IC::ROOM_JOINT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_IC_ROOM_PLAYER: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::IC::ROOM_PLAYERT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_IC_ROOM_PLAYER_DISCONNECTED: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::IC::ROOM_PLAYER_DISCONNECTEDT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_IC_ROOM_REJOIN: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::IC::ROOM_REJOINT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_AUTH: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_AUTHT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_CREATE: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_ACTOR_CREATET *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_DESPAWN: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_ACTOR_DESPAWNT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_DISAPPEAR: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_ACTOR_DISAPPEART *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_FORMATION: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_ACTOR_FORMATIONT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_MEDAL_UPDATE: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_ACTOR_MEDAL_UPDATET *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_RESPAWN: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_ACTOR_RESPAWNT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_SPAWN: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_ACTOR_SPAWNT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_TELEPORT: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_ACTOR_TELEPORTT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ACTOR_UPDATE: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_ACTOR_UPDATET *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ATTACK_NORMAL: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_ATTACK_NORMALT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ATTACK_NOW: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_ATTACK_NOWT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_CHANGE_CREW: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_CHANGE_CREWT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_CHANGE_SPIRIT: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_CHANGE_SPIRITT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_COUNT: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_DICE_COUNTT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_NUM: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_DICE_NUMT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_OPEN: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_DICE_OPENT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DICE_RESULT: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_DICE_RESULTT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DOOR_EVENT: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_DOOR_EVENTT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_DROP_CREW: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_DROP_CREWT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_NEW_PLAYER: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_NEW_PLAYERT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_ACTIVATED: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_SKILL_ACTIVATEDT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_BLOCKED: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_SKILL_BLOCKEDT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_SKILL_CASTEDT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SKILL_CASTED_INTERVAL: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_SKILL_CASTED_INTERVALT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_SCORE: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_SYNC_ACTOR_SCORET *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_ACTOR_UPDATE: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_SYNC_ACTOR_UPDATET *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_PLAYER_SCORE: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_SYNC_PLAYER_SCORET *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_SKILL_UPDATE: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_SYNC_SKILL_UPDATET *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_SYNC_TIME_REMAIN: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_SYNC_TIME_REMAINT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_TEAM_POINT_UPDATE: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_TEAM_POINT_UPDATET *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ZONE_EVENT: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_ZONE_EVENTT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_BT_ZONE_STATE: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_BT_ZONE_STATET *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_CINEMATIC_DONE: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_CINEMATIC_DONET *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_COMMON_ERROR: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_COMMON_ERRORT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_COST_UPDATE_AVATAR: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_COST_UPDATE_AVATART *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_SELECT: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_CS_DECK_SELECTT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_SELECT_READY: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_CS_DECK_SELECT_READYT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_DECK_TIME_REMAIN: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_CS_DECK_TIME_REMAINT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_CS_MATCHED: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_CS_MATCHEDT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_CACHED_DONE: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_DECK_CACHED_DONET *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SCENE_LOADED: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_DECK_SCENE_LOADEDT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SELECT: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_DECK_SELECTT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_DECK_SELECT_READY: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_DECK_SELECT_READYT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_DISCONNECTED: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_DISCONNECTEDT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_MATCHED: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_MATCHEDT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_MATCH_ROUND: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_MATCH_ROUNDT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_GO: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_PARTY_GOT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_LEADER_SLOT: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_PARTY_LEADER_SLOTT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_PLAYER: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_PARTY_PLAYERT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_PLAYER_EXIT: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_PARTY_PLAYER_EXITT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PARTY_UPDATE_PUBLIC: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_PARTY_UPDATE_PUBLICT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_COUNT: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_PLAY_COUNTT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_READY: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_PLAY_READYT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_SEND_RESULT: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_PLAY_SEND_RESULTT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_START: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_PLAY_STARTT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_PLAY_TIMEOUT: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_PLAY_TIMEOUTT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_ACK_STEP_GO: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::ACK_STEP_GOT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_CHAT_CHANNEL_ENTER: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::CHAT_CHANNEL_ENTERT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_CHAT_CHANNEL_EXIT: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::CHAT_CHANNEL_EXITT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_CHAT_MESSAGE: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::CHAT_MESSAGET *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_CHAT_SUBSCRIBED: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::CHAT_SUBSCRIBEDT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_CHAT_UNSUBSCRIBED: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::CHAT_UNSUBSCRIBEDT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_REQ_CINEMATIC_PLAY: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::REQ_CINEMATIC_PLAYT *>(value);
      delete ptr;
      break;
    }
    case UNION_RTS_OVERLORD_RTS_S2C_REQ_STEP_READY: {
      auto ptr = reinterpret_cast<OVERLORD::RTS::S2C::REQ_STEP_READYT *>(value);
      delete ptr;
      break;
    }
    default: break;
  }
  value = nullptr;
  type = UNION_RTS_NONE;
}

inline const OVERLORD::CMD_RTS *GetCMD_RTS(const void *buf) {
  return flatbuffers::GetRoot<OVERLORD::CMD_RTS>(buf);
}

inline bool VerifyCMD_RTSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<OVERLORD::CMD_RTS>(nullptr);
}

inline const char *CMD_RTSExtension() {
  return "bfbs";
}

inline void FinishCMD_RTSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<OVERLORD::CMD_RTS> root) {
  fbb.Finish(root);
}

inline std::unique_ptr<CMD_RTST> UnPackCMD_RTS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<CMD_RTST>(GetCMD_RTS(buf)->UnPack(res));
}

}  // namespace OVERLORD

#endif  // FLATBUFFERS_GENERATED_RTS_OVERLORD_H_
