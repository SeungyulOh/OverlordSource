// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_CHAT_OVERLORD_H_
#define FLATBUFFERS_GENERATED_CHAT_OVERLORD_H_

#include "flatbuffers/flatbuffers.h"

namespace OVERLORD {
namespace CHAT {

struct ChatException;

struct ChatSubscribe;

struct ChatSubscribed;

struct ChatChannelMove;

struct ChatChannelMoved;

struct ChatChannelEnter;

struct ChatChannelExit;

struct ChatMessage;

}  // namespace CHAT

struct COMMAND;

namespace CHAT {

enum CHAT_TYPE {
  CHAT_TYPE_NORMAL = 0,
  CHAT_TYPE_GET = 1,
  CHAT_TYPE_EVENT = 2,
  CHAT_TYPE_GM = 3,
  CHAT_TYPE_MIN = CHAT_TYPE_NORMAL,
  CHAT_TYPE_MAX = CHAT_TYPE_GM
};

inline const char **EnumNamesCHAT_TYPE() {
  static const char *names[] = { "NORMAL", "GET", "EVENT", "GM", nullptr };
  return names;
}

inline const char *EnumNameCHAT_TYPE(CHAT_TYPE e) { return EnumNamesCHAT_TYPE()[static_cast<int>(e)]; }

}  // namespace CHAT

enum UNIONS {
  UNIONS_NONE = 0,
  UNIONS_OVERLORD_CHAT_ChatSubscribe = 1,
  UNIONS_OVERLORD_CHAT_ChatSubscribed = 2,
  UNIONS_OVERLORD_CHAT_ChatChannelMove = 3,
  UNIONS_OVERLORD_CHAT_ChatChannelMoved = 4,
  UNIONS_OVERLORD_CHAT_ChatChannelEnter = 5,
  UNIONS_OVERLORD_CHAT_ChatChannelExit = 6,
  UNIONS_OVERLORD_CHAT_ChatMessage = 7,
  UNIONS_MIN = UNIONS_NONE,
  UNIONS_MAX = UNIONS_OVERLORD_CHAT_ChatMessage
};

inline const char **EnumNamesUNIONS() {
  static const char *names[] = { "NONE", "OVERLORD_CHAT_ChatSubscribe", "OVERLORD_CHAT_ChatSubscribed", "OVERLORD_CHAT_ChatChannelMove", "OVERLORD_CHAT_ChatChannelMoved", "OVERLORD_CHAT_ChatChannelEnter", "OVERLORD_CHAT_ChatChannelExit", "OVERLORD_CHAT_ChatMessage", nullptr };
  return names;
}

inline const char *EnumNameUNIONS(UNIONS e) { return EnumNamesUNIONS()[static_cast<int>(e)]; }

inline bool VerifyUNIONS(flatbuffers::Verifier &verifier, const void *union_obj, UNIONS type);

namespace CHAT {

struct ChatException FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SUC = 4,
    VT_CODE = 6,
    VT_NAME = 8,
    VT_DESC = 10
  };
  bool suc() const { return GetField<uint8_t>(VT_SUC, 0) != 0; }
  int32_t code() const { return GetField<int32_t>(VT_CODE, 0); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(VT_NAME); }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *desc() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_DESC); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SUC) &&
           VerifyField<int32_t>(verifier, VT_CODE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DESC) &&
           verifier.Verify(desc()) &&
           verifier.VerifyVectorOfStrings(desc()) &&
           verifier.EndTable();
  }
};

struct ChatExceptionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_suc(bool suc) { fbb_.AddElement<uint8_t>(ChatException::VT_SUC, static_cast<uint8_t>(suc), 0); }
  void add_code(int32_t code) { fbb_.AddElement<int32_t>(ChatException::VT_CODE, code, 0); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(ChatException::VT_NAME, name); }
  void add_desc(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> desc) { fbb_.AddOffset(ChatException::VT_DESC, desc); }
  ChatExceptionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ChatExceptionBuilder &operator=(const ChatExceptionBuilder &);
  flatbuffers::Offset<ChatException> Finish() {
    auto o = flatbuffers::Offset<ChatException>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<ChatException> CreateChatException(flatbuffers::FlatBufferBuilder &_fbb,
    bool suc = false,
    int32_t code = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> desc = 0) {
  ChatExceptionBuilder builder_(_fbb);
  builder_.add_desc(desc);
  builder_.add_name(name);
  builder_.add_code(code);
  builder_.add_suc(suc);
  return builder_.Finish();
}

inline flatbuffers::Offset<ChatException> CreateChatExceptionDirect(flatbuffers::FlatBufferBuilder &_fbb,
    bool suc = false,
    int32_t code = 0,
    const char *name = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *desc = nullptr) {
  return CreateChatException(_fbb, suc, code, name ? _fbb.CreateString(name) : 0, desc ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*desc) : 0);
}

struct ChatSubscribe FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CLIENTKEY = 4,
    VT_DEVICEID = 6,
    VT_CHANNELS = 8
  };
  const flatbuffers::String *clientkey() const { return GetPointer<const flatbuffers::String *>(VT_CLIENTKEY); }
  const flatbuffers::String *deviceid() const { return GetPointer<const flatbuffers::String *>(VT_DEVICEID); }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *channels() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_CHANNELS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CLIENTKEY) &&
           verifier.Verify(clientkey()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DEVICEID) &&
           verifier.Verify(deviceid()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CHANNELS) &&
           verifier.Verify(channels()) &&
           verifier.VerifyVectorOfStrings(channels()) &&
           verifier.EndTable();
  }
};

struct ChatSubscribeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_clientkey(flatbuffers::Offset<flatbuffers::String> clientkey) { fbb_.AddOffset(ChatSubscribe::VT_CLIENTKEY, clientkey); }
  void add_deviceid(flatbuffers::Offset<flatbuffers::String> deviceid) { fbb_.AddOffset(ChatSubscribe::VT_DEVICEID, deviceid); }
  void add_channels(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> channels) { fbb_.AddOffset(ChatSubscribe::VT_CHANNELS, channels); }
  ChatSubscribeBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ChatSubscribeBuilder &operator=(const ChatSubscribeBuilder &);
  flatbuffers::Offset<ChatSubscribe> Finish() {
    auto o = flatbuffers::Offset<ChatSubscribe>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<ChatSubscribe> CreateChatSubscribe(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> clientkey = 0,
    flatbuffers::Offset<flatbuffers::String> deviceid = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> channels = 0) {
  ChatSubscribeBuilder builder_(_fbb);
  builder_.add_channels(channels);
  builder_.add_deviceid(deviceid);
  builder_.add_clientkey(clientkey);
  return builder_.Finish();
}

inline flatbuffers::Offset<ChatSubscribe> CreateChatSubscribeDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const char *clientkey = nullptr,
    const char *deviceid = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *channels = nullptr) {
  return CreateChatSubscribe(_fbb, clientkey ? _fbb.CreateString(clientkey) : 0, deviceid ? _fbb.CreateString(deviceid) : 0, channels ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*channels) : 0);
}

struct ChatSubscribed FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_KID = 4,
    VT_WHO = 6,
    VT_CHANNELS = 8,
    VT_ERROR = 10
  };
  int32_t kId() const { return GetField<int32_t>(VT_KID, 0); }
  const flatbuffers::String *who() const { return GetPointer<const flatbuffers::String *>(VT_WHO); }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *channels() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_CHANNELS); }
  const ChatException *error() const { return GetPointer<const ChatException *>(VT_ERROR); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_KID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_WHO) &&
           verifier.Verify(who()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CHANNELS) &&
           verifier.Verify(channels()) &&
           verifier.VerifyVectorOfStrings(channels()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ERROR) &&
           verifier.VerifyTable(error()) &&
           verifier.EndTable();
  }
};

struct ChatSubscribedBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_kId(int32_t kId) { fbb_.AddElement<int32_t>(ChatSubscribed::VT_KID, kId, 0); }
  void add_who(flatbuffers::Offset<flatbuffers::String> who) { fbb_.AddOffset(ChatSubscribed::VT_WHO, who); }
  void add_channels(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> channels) { fbb_.AddOffset(ChatSubscribed::VT_CHANNELS, channels); }
  void add_error(flatbuffers::Offset<ChatException> error) { fbb_.AddOffset(ChatSubscribed::VT_ERROR, error); }
  ChatSubscribedBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ChatSubscribedBuilder &operator=(const ChatSubscribedBuilder &);
  flatbuffers::Offset<ChatSubscribed> Finish() {
    auto o = flatbuffers::Offset<ChatSubscribed>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<ChatSubscribed> CreateChatSubscribed(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t kId = 0,
    flatbuffers::Offset<flatbuffers::String> who = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> channels = 0,
    flatbuffers::Offset<ChatException> error = 0) {
  ChatSubscribedBuilder builder_(_fbb);
  builder_.add_error(error);
  builder_.add_channels(channels);
  builder_.add_who(who);
  builder_.add_kId(kId);
  return builder_.Finish();
}

inline flatbuffers::Offset<ChatSubscribed> CreateChatSubscribedDirect(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t kId = 0,
    const char *who = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *channels = nullptr,
    flatbuffers::Offset<ChatException> error = 0) {
  return CreateChatSubscribed(_fbb, kId, who ? _fbb.CreateString(who) : 0, channels ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*channels) : 0, error);
}

struct ChatChannelMove FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CLIENTKEY = 4,
    VT_DEVICEID = 6,
    VT_CHANNEL = 8
  };
  const flatbuffers::String *clientkey() const { return GetPointer<const flatbuffers::String *>(VT_CLIENTKEY); }
  const flatbuffers::String *deviceid() const { return GetPointer<const flatbuffers::String *>(VT_DEVICEID); }
  const flatbuffers::String *channel() const { return GetPointer<const flatbuffers::String *>(VT_CHANNEL); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CLIENTKEY) &&
           verifier.Verify(clientkey()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DEVICEID) &&
           verifier.Verify(deviceid()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CHANNEL) &&
           verifier.Verify(channel()) &&
           verifier.EndTable();
  }
};

struct ChatChannelMoveBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_clientkey(flatbuffers::Offset<flatbuffers::String> clientkey) { fbb_.AddOffset(ChatChannelMove::VT_CLIENTKEY, clientkey); }
  void add_deviceid(flatbuffers::Offset<flatbuffers::String> deviceid) { fbb_.AddOffset(ChatChannelMove::VT_DEVICEID, deviceid); }
  void add_channel(flatbuffers::Offset<flatbuffers::String> channel) { fbb_.AddOffset(ChatChannelMove::VT_CHANNEL, channel); }
  ChatChannelMoveBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ChatChannelMoveBuilder &operator=(const ChatChannelMoveBuilder &);
  flatbuffers::Offset<ChatChannelMove> Finish() {
    auto o = flatbuffers::Offset<ChatChannelMove>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<ChatChannelMove> CreateChatChannelMove(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> clientkey = 0,
    flatbuffers::Offset<flatbuffers::String> deviceid = 0,
    flatbuffers::Offset<flatbuffers::String> channel = 0) {
  ChatChannelMoveBuilder builder_(_fbb);
  builder_.add_channel(channel);
  builder_.add_deviceid(deviceid);
  builder_.add_clientkey(clientkey);
  return builder_.Finish();
}

inline flatbuffers::Offset<ChatChannelMove> CreateChatChannelMoveDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const char *clientkey = nullptr,
    const char *deviceid = nullptr,
    const char *channel = nullptr) {
  return CreateChatChannelMove(_fbb, clientkey ? _fbb.CreateString(clientkey) : 0, deviceid ? _fbb.CreateString(deviceid) : 0, channel ? _fbb.CreateString(channel) : 0);
}

struct ChatChannelMoved FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_KID = 4,
    VT_CHANNEL = 6,
    VT_ERROR = 8
  };
  int32_t kId() const { return GetField<int32_t>(VT_KID, 0); }
  const flatbuffers::String *channel() const { return GetPointer<const flatbuffers::String *>(VT_CHANNEL); }
  const ChatException *error() const { return GetPointer<const ChatException *>(VT_ERROR); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_KID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CHANNEL) &&
           verifier.Verify(channel()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ERROR) &&
           verifier.VerifyTable(error()) &&
           verifier.EndTable();
  }
};

struct ChatChannelMovedBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_kId(int32_t kId) { fbb_.AddElement<int32_t>(ChatChannelMoved::VT_KID, kId, 0); }
  void add_channel(flatbuffers::Offset<flatbuffers::String> channel) { fbb_.AddOffset(ChatChannelMoved::VT_CHANNEL, channel); }
  void add_error(flatbuffers::Offset<ChatException> error) { fbb_.AddOffset(ChatChannelMoved::VT_ERROR, error); }
  ChatChannelMovedBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ChatChannelMovedBuilder &operator=(const ChatChannelMovedBuilder &);
  flatbuffers::Offset<ChatChannelMoved> Finish() {
    auto o = flatbuffers::Offset<ChatChannelMoved>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<ChatChannelMoved> CreateChatChannelMoved(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t kId = 0,
    flatbuffers::Offset<flatbuffers::String> channel = 0,
    flatbuffers::Offset<ChatException> error = 0) {
  ChatChannelMovedBuilder builder_(_fbb);
  builder_.add_error(error);
  builder_.add_channel(channel);
  builder_.add_kId(kId);
  return builder_.Finish();
}

inline flatbuffers::Offset<ChatChannelMoved> CreateChatChannelMovedDirect(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t kId = 0,
    const char *channel = nullptr,
    flatbuffers::Offset<ChatException> error = 0) {
  return CreateChatChannelMoved(_fbb, kId, channel ? _fbb.CreateString(channel) : 0, error);
}

struct ChatChannelEnter FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_KID = 4,
    VT_WHO = 6,
    VT_CHANNEL = 8
  };
  int32_t kId() const { return GetField<int32_t>(VT_KID, 0); }
  const flatbuffers::String *who() const { return GetPointer<const flatbuffers::String *>(VT_WHO); }
  const flatbuffers::String *channel() const { return GetPointer<const flatbuffers::String *>(VT_CHANNEL); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_KID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_WHO) &&
           verifier.Verify(who()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CHANNEL) &&
           verifier.Verify(channel()) &&
           verifier.EndTable();
  }
};

struct ChatChannelEnterBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_kId(int32_t kId) { fbb_.AddElement<int32_t>(ChatChannelEnter::VT_KID, kId, 0); }
  void add_who(flatbuffers::Offset<flatbuffers::String> who) { fbb_.AddOffset(ChatChannelEnter::VT_WHO, who); }
  void add_channel(flatbuffers::Offset<flatbuffers::String> channel) { fbb_.AddOffset(ChatChannelEnter::VT_CHANNEL, channel); }
  ChatChannelEnterBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ChatChannelEnterBuilder &operator=(const ChatChannelEnterBuilder &);
  flatbuffers::Offset<ChatChannelEnter> Finish() {
    auto o = flatbuffers::Offset<ChatChannelEnter>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<ChatChannelEnter> CreateChatChannelEnter(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t kId = 0,
    flatbuffers::Offset<flatbuffers::String> who = 0,
    flatbuffers::Offset<flatbuffers::String> channel = 0) {
  ChatChannelEnterBuilder builder_(_fbb);
  builder_.add_channel(channel);
  builder_.add_who(who);
  builder_.add_kId(kId);
  return builder_.Finish();
}

inline flatbuffers::Offset<ChatChannelEnter> CreateChatChannelEnterDirect(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t kId = 0,
    const char *who = nullptr,
    const char *channel = nullptr) {
  return CreateChatChannelEnter(_fbb, kId, who ? _fbb.CreateString(who) : 0, channel ? _fbb.CreateString(channel) : 0);
}

struct ChatChannelExit FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_KID = 4,
    VT_WHO = 6,
    VT_CHANNEL = 8
  };
  int32_t kId() const { return GetField<int32_t>(VT_KID, 0); }
  const flatbuffers::String *who() const { return GetPointer<const flatbuffers::String *>(VT_WHO); }
  const flatbuffers::String *channel() const { return GetPointer<const flatbuffers::String *>(VT_CHANNEL); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_KID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_WHO) &&
           verifier.Verify(who()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CHANNEL) &&
           verifier.Verify(channel()) &&
           verifier.EndTable();
  }
};

struct ChatChannelExitBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_kId(int32_t kId) { fbb_.AddElement<int32_t>(ChatChannelExit::VT_KID, kId, 0); }
  void add_who(flatbuffers::Offset<flatbuffers::String> who) { fbb_.AddOffset(ChatChannelExit::VT_WHO, who); }
  void add_channel(flatbuffers::Offset<flatbuffers::String> channel) { fbb_.AddOffset(ChatChannelExit::VT_CHANNEL, channel); }
  ChatChannelExitBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ChatChannelExitBuilder &operator=(const ChatChannelExitBuilder &);
  flatbuffers::Offset<ChatChannelExit> Finish() {
    auto o = flatbuffers::Offset<ChatChannelExit>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<ChatChannelExit> CreateChatChannelExit(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t kId = 0,
    flatbuffers::Offset<flatbuffers::String> who = 0,
    flatbuffers::Offset<flatbuffers::String> channel = 0) {
  ChatChannelExitBuilder builder_(_fbb);
  builder_.add_channel(channel);
  builder_.add_who(who);
  builder_.add_kId(kId);
  return builder_.Finish();
}

inline flatbuffers::Offset<ChatChannelExit> CreateChatChannelExitDirect(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t kId = 0,
    const char *who = nullptr,
    const char *channel = nullptr) {
  return CreateChatChannelExit(_fbb, kId, who ? _fbb.CreateString(who) : 0, channel ? _fbb.CreateString(channel) : 0);
}

struct ChatMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_WHO = 4,
    VT_KID = 6,
    VT_TYPE = 8,
    VT_CHANNEL = 10,
    VT_MESSAGE = 12,
    VT_FRAME = 14
  };
  const flatbuffers::String *who() const { return GetPointer<const flatbuffers::String *>(VT_WHO); }
  int32_t kId() const { return GetField<int32_t>(VT_KID, 0); }
  CHAT_TYPE type() const { return static_cast<CHAT_TYPE>(GetField<int8_t>(VT_TYPE, 0)); }
  const flatbuffers::String *channel() const { return GetPointer<const flatbuffers::String *>(VT_CHANNEL); }
  const flatbuffers::String *message() const { return GetPointer<const flatbuffers::String *>(VT_MESSAGE); }
  int64_t frame() const { return GetField<int64_t>(VT_FRAME, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_WHO) &&
           verifier.Verify(who()) &&
           VerifyField<int32_t>(verifier, VT_KID) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CHANNEL) &&
           verifier.Verify(channel()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_MESSAGE) &&
           verifier.Verify(message()) &&
           VerifyField<int64_t>(verifier, VT_FRAME) &&
           verifier.EndTable();
  }
};

struct ChatMessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_who(flatbuffers::Offset<flatbuffers::String> who) { fbb_.AddOffset(ChatMessage::VT_WHO, who); }
  void add_kId(int32_t kId) { fbb_.AddElement<int32_t>(ChatMessage::VT_KID, kId, 0); }
  void add_type(CHAT_TYPE type) { fbb_.AddElement<int8_t>(ChatMessage::VT_TYPE, static_cast<int8_t>(type), 0); }
  void add_channel(flatbuffers::Offset<flatbuffers::String> channel) { fbb_.AddOffset(ChatMessage::VT_CHANNEL, channel); }
  void add_message(flatbuffers::Offset<flatbuffers::String> message) { fbb_.AddOffset(ChatMessage::VT_MESSAGE, message); }
  void add_frame(int64_t frame) { fbb_.AddElement<int64_t>(ChatMessage::VT_FRAME, frame, 0); }
  ChatMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ChatMessageBuilder &operator=(const ChatMessageBuilder &);
  flatbuffers::Offset<ChatMessage> Finish() {
    auto o = flatbuffers::Offset<ChatMessage>(fbb_.EndTable(start_, 6));
    return o;
  }
};

inline flatbuffers::Offset<ChatMessage> CreateChatMessage(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> who = 0,
    int32_t kId = 0,
    CHAT_TYPE type = CHAT_TYPE_NORMAL,
    flatbuffers::Offset<flatbuffers::String> channel = 0,
    flatbuffers::Offset<flatbuffers::String> message = 0,
    int64_t frame = 0) {
  ChatMessageBuilder builder_(_fbb);
  builder_.add_frame(frame);
  builder_.add_message(message);
  builder_.add_channel(channel);
  builder_.add_kId(kId);
  builder_.add_who(who);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<ChatMessage> CreateChatMessageDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const char *who = nullptr,
    int32_t kId = 0,
    CHAT_TYPE type = CHAT_TYPE_NORMAL,
    const char *channel = nullptr,
    const char *message = nullptr,
    int64_t frame = 0) {
  return CreateChatMessage(_fbb, who ? _fbb.CreateString(who) : 0, kId, type, channel ? _fbb.CreateString(channel) : 0, message ? _fbb.CreateString(message) : 0, frame);
}

}  // namespace CHAT

struct COMMAND FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_API_TYPE = 4,
    VT_API = 6
  };
  UNIONS api_type() const { return static_cast<UNIONS>(GetField<uint8_t>(VT_API_TYPE, 0)); }
  const void *api() const { return GetPointer<const void *>(VT_API); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_API_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_API) &&
           VerifyUNIONS(verifier, api(), api_type()) &&
           verifier.EndTable();
  }
};

struct COMMANDBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_api_type(UNIONS api_type) { fbb_.AddElement<uint8_t>(COMMAND::VT_API_TYPE, static_cast<uint8_t>(api_type), 0); }
  void add_api(flatbuffers::Offset<void> api) { fbb_.AddOffset(COMMAND::VT_API, api); }
  COMMANDBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  COMMANDBuilder &operator=(const COMMANDBuilder &);
  flatbuffers::Offset<COMMAND> Finish() {
    auto o = flatbuffers::Offset<COMMAND>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<COMMAND> CreateCOMMAND(flatbuffers::FlatBufferBuilder &_fbb,
    UNIONS api_type = UNIONS_NONE,
    flatbuffers::Offset<void> api = 0) {
  COMMANDBuilder builder_(_fbb);
  builder_.add_api(api);
  builder_.add_api_type(api_type);
  return builder_.Finish();
}

namespace CHAT {

}  // namespace CHAT

inline bool VerifyUNIONS(flatbuffers::Verifier &verifier, const void *union_obj, UNIONS type) {
  switch (type) {
    case UNIONS_NONE: return true;
    case UNIONS_OVERLORD_CHAT_ChatSubscribe: return verifier.VerifyTable(reinterpret_cast<const OVERLORD::CHAT::ChatSubscribe *>(union_obj));
    case UNIONS_OVERLORD_CHAT_ChatSubscribed: return verifier.VerifyTable(reinterpret_cast<const OVERLORD::CHAT::ChatSubscribed *>(union_obj));
    case UNIONS_OVERLORD_CHAT_ChatChannelMove: return verifier.VerifyTable(reinterpret_cast<const OVERLORD::CHAT::ChatChannelMove *>(union_obj));
    case UNIONS_OVERLORD_CHAT_ChatChannelMoved: return verifier.VerifyTable(reinterpret_cast<const OVERLORD::CHAT::ChatChannelMoved *>(union_obj));
    case UNIONS_OVERLORD_CHAT_ChatChannelEnter: return verifier.VerifyTable(reinterpret_cast<const OVERLORD::CHAT::ChatChannelEnter *>(union_obj));
    case UNIONS_OVERLORD_CHAT_ChatChannelExit: return verifier.VerifyTable(reinterpret_cast<const OVERLORD::CHAT::ChatChannelExit *>(union_obj));
    case UNIONS_OVERLORD_CHAT_ChatMessage: return verifier.VerifyTable(reinterpret_cast<const OVERLORD::CHAT::ChatMessage *>(union_obj));
    default: return false;
  }
}

inline const OVERLORD::COMMAND *GetCOMMAND(const void *buf) { return flatbuffers::GetRoot<OVERLORD::COMMAND>(buf); }

inline bool VerifyCOMMANDBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<OVERLORD::COMMAND>(nullptr); }

inline void FinishCOMMANDBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<OVERLORD::COMMAND> root) { fbb.Finish(root); }

}  // namespace OVERLORD

#endif  // FLATBUFFERS_GENERATED_CHAT_OVERLORD_H_
